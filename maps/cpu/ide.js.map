{"version":3,"sources":["cpu/ide.js"],"names":["window","breakpoints","fromTextArea","e","asmEditor","CodeMirror","lineNumbers","lineWrapping","styleActiveLine","styleSelectedText","styleActiveSelected","gutters","mode","matchBrackets","autoCloseBrackets","mcodeEditor","readOnly","theme","setSize","on","editor","line","gutter","event","undefined","lineInfo","gutterMarkers","setGutter","setGutterMarker","marker","getGutterMarker","document","color","createElement","innerHTML","showStdCode","area","setValue","std_code","showMachineCode","value","i","mcode","length","cnt","m","bin","parseInt","toString","success_highlight","addLineClass","highlight","remove_highlight","removeLineClass","select","setCursor","change_editor","asm_code","getValue","asm","Assembler","code_memory","get_std_code","get_machine_code","mcode_lines","get_mcode_lines","paPos","label_map","code_length","running","pa","axepu","debug_mode","registers","memory","onclick","AxePu","p","find_breakpoint","do_next_ins","get_register","update_table","log","finished","reset_all","tag","asm_pa","keys","run_next","has_breakpoints","clear_registers_table","clear_memory_table","nodelist","children","memory_table","rows","len","row","cells","removeAttribute","update_registers_table","get_all_registers","Object","str_pad","hex","zero","tmp","toUpperCase","update_memory_table","f1","stack_segment","slice","addr","data","setAttribute","highligh_current_line","clear_all_highlight","finish_process","showToast","selector","style","addClass","slideUp","push","lastEle","$","update_mem_reg","get_memory","setInterval","_main"],"mappings":"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","file":"../../cpu/ide.js","sourcesContent":["window.breakpoints = {}\n\nvar asmEditor = CodeMirror.fromTextArea(e(\"#asm_code\"), {\n    lineNumbers: true,\n    lineWrapping: true,\n    styleActiveLine: true,\n    styleSelectedText: true,\n    styleActiveSelected: true,\n    gutters: [\"breakpoints\", \"CodeMirror-linenumbers\"],\n    mode: \"text/x-z80\",\n    matchBrackets: true,\n    autoCloseBrackets: true,\n    theme: 'darcula',\n});\n\n// 机器码显示区域，不可修改\nvar mcodeEditor = CodeMirror.fromTextArea(e(\"#machine_code\"), {\n    mode: \"text/x-z80\",\n    readOnly: true,\n    lineWrapping: true,\n    lineNumbers: true,\n    theme: 'darcula',\n})\n\nasmEditor.setSize(\"auto\", 600);\nmcodeEditor.setSize(\"auto\", 500);\n\n// 点击产生断点\nasmEditor.on(\"gutterClick\", function (editor, line, gutter, event) {\n    var info = editor.lineInfo(line)\n    // log('产生断点', line)\n    // log('line info:', info)\n    // log('editor:', editor)\n    // log('line:', line)\n    // 如果有红点了则取消\n    // log('guttermarker:', info.gutterMarkers)\n    // gutterMarkers是info的属性\n    if (info.gutterMarkers != undefined) {\n        clearGutter(editor, line)\n    } else {\n        setGutter(editor, line)\n    }\n})\n\n// 清除断点\nvar clearGutter = function (editor, line) {\n    // 删除该全局的断点\n    delete window.breakpoints[line]\n    editor.setGutterMarker(line, \"breakpoints\", null)\n}\n// 标记断点\nvar setGutter = function (editor, line) {\n    // 设置全局的断点\n    window.breakpoints[line] = true\n    var marker = getGutterMarker()\n    editor.setGutterMarker(line, \"breakpoints\", marker)\n}\n// 得到断点的模板\nvar getGutterMarker = function () {\n    var marker = document.createElement(\"div\")\n    marker.style.color = \"#00ff00\"\n    marker.innerHTML = \"&nbsp▶ \" //\n    return marker\n}\n\nvar showStdCode = function (area, std_code) {\n    area.setValue(std_code)\n}\n\nvar showMachineCode = function (area, mcode) {\n    var value = \"\"\n    var b = \"\"\n    for (var i = 0; i < mcode.length; ++i) {\n        let m = mcode[i]\n        // log('m:', m)\n        let bin = parseInt(m).toString(2)\n        let cnt = 8 - bin.length\n        for (let i = 0; i < cnt; ++i) {\n            bin = \"0\" + bin\n        }\n        b = b + bin + '\\n'\n        let show = bin + \"\\t(\" + m + \")\"\n        value = value + show + \"\\n\"\n    }\n    // log(b)\n    area.setValue(value)\n}\n\nvar success_highlight = function (editor, line) {\n    // editor.setCursor(line)\n    // log('highlight,', line, editor)\n    editor.addLineClass(line, \"wrap\", \"success-highlight-background\")\n}\nvar highlight = function (editor, line) {\n    // log('高亮:',editor, line)\n    // editor.setCursor(line)\n    // log('highlight,', line, editor)\n    editor.addLineClass(line, \"wrap\", \"highlight-background\")\n}\nvar remove_highlight = function (editor, line) {\n    // log('移除高亮,', line)\n    editor.removeLineClass(line, \"wrap\", \"highlight-background\")\n}\nvar select = function (editor, line) {\n    editor.setCursor(line)\n    // log('select,', line, editor)\n    editor.addLineClass(line, \"wrap\", \"highlight-background\")\n}\n\nvar change_editor = function () {\n    // 改成执行标准汇编\n    var asm_code = asmEditor.getValue()\n\n    // log('【asm_code】', asm_code)\n\n    var asm = Assembler.new(asm_code)\n    asm.run()\n    // 机器码\n    code_memory = asm.get_machine_code()\n    // log('code_memory:\\n', code_memory.slice(1024))\n    // 标准汇编\n    std_code = asm.get_std_code()\n\n    code_length = code_memory.length\n    mcode_lines = asm.get_mcode_lines() // 得到机器码对应于汇编码的行数\n\n    label_map = asm.get_labelmap()\n    // 将翻译好的机器码按格式显示\n    // showMachineCode(mcodeEditor, code_memory)\n    showStdCode(mcodeEditor, std_code)\n}\nvar paPos = []\n\n// 全局的行号和机器码\nvar code_memory = []\n// pa的最大范围, 由于pa是程序计数器，所以只会指向代码段\nvar code_length = 0\nvar mcode_lines = []\n\nvar label_map = null\nvar running = false\n\nvar pa = null\nvar axepu = null\nvar debug_mode = false\nvar find_breakpoint = false\nvar finished = false\n\n// 运行时的寄存器和内存，一直刷新\nvar registers = null\nvar memory = null\nvar memory_table = e('#memory-table')\n\n// 编辑完asmEditor则执行汇编器,不应该用update\nasmEditor.on(\"change\", function () {\n    change_editor()\n})\n\n// 点击运行按钮\ne('#run-button').onclick = function () {\n    // 检查代码不为空且无错误\n    // 点击运行的时候检查是否为debug模式\n    if (has_breakpoints()) {\n        debug_mode = true\n    }\n    // 只有点运行才可以启动\n    axepu = new AxePu(code_memory)\n    // 初始化\n    pa = 0\n\n    // 设置了run，定时器在扫描\n    running = true\n    // 初始化\n    paPos = []\n\n    if (debug_mode == true) {\n        // 如果是debug模式，则停止运行，因为pa是停止的，只要改变running的状态即可\n        //运行到断点处停下\n        while (pa < mcode_lines.length) {\n            for (var p in window.breakpoints) {\n                // log('p, pa:', p, mcode_lines[pa])\n                if (p == mcode_lines[pa]) {\n                    find_breakpoint = true\n                    break\n                }\n            }\n            if (find_breakpoint) {\n                break\n            }\n            axepu.do_next_ins()\n            // 执行一行更新pa\n            pa = axepu.get_register('pa')\n        }\n    }\n}\n\n// 点击下一步\ne('#next-button').onclick = function () {\n    // log('点击下一步')\n    if (running == true) {\n        update_table()\n        run_next()\n    }\n}\n\n// 点击停止按钮\ne('#stop-button').onclick = function () {\n    log('点击停止')\n    // 初始化\n    running = false\n}\n\n\n// 点击重置按钮\ne('#reset-button').onclick = function () {\n    change_editor()\n    running = false\n    pa = null\n    axepu = null\n    debug_mode = false\n    find_breakpoint = false\n    finished = false\n    paPos = []\n\n    reset_all()\n    // 去除所有断点\n    // var keys = Object.keys(window.breakpoints)\n    // for (var i = 0; i < keys.length; ++i){\n    //     var line = keys[i]\n    //     log('去除断点:', line)\n    //     clearGutter(asmEditor, line)\n    // }\n}\n\n// 点击跳过按钮\ne('#continue-button').onclick = function () {\n    // 从当前断点执行到下一个断点\n    var asm_pa = mcode_lines[pa]\n    var keys = Object.keys(window.breakpoints)\n\n    // 跳到的位置是：第一个比当前asm_pa大的断点处\n    var tag = asm_pa\n    for (var i = 0; i < keys.length; ++i) {\n        if (tag < keys[i]) {\n            tag = keys[i]\n            break\n        }\n    }\n    log('下一个断点:', tag)\n    while (asm_pa < tag) {\n        run_next()\n        asm_pa = mcode_lines[pa]\n    }\n}\n\nvar has_breakpoints = function () {\n    for (var p in window.breakpoints) {\n        return true\n    }\n    return false\n}\n\nvar reset_all = function () {\n    log('重置所有')\n    clear_registers_table()\n    clear_memory_table()\n    clear_all_highlight()\n}\n\nvar clear_registers_table = function () {\n    var nodelist = e('#registers-tr').children\n    for (var i = 0; i < nodelist.length; ++i) {\n        var item = nodelist[i]\n        item.innerHTML = 0\n    }\n}\n\nvar clear_memory_table = function () {\n    var memory_table = e('#memory-table')\n    var len = memory_table.rows.length - 1  // 减去标题\n    for (var i = 0; i < len; ++i) {\n        var row = memory_table.rows[i + 1]\n        row.cells[0].removeAttribute('style')\n        row.cells[1].innerHTML = 0\n    }\n}\n\nvar update_registers_table = function () {\n    // log('update_registers')\n    if (axepu != null) {\n        // 只要虚拟机运行了，就有寄存器了\n        var registers = axepu.get_all_registers()\n        var nodelist = e('#registers-tr').children\n        var keys = Object.keys(registers)\n        // log('keys:', keys)\n        for (var i = 0; i < keys.length; ++i) {\n            var k = keys[i]\n            var item = nodelist[i]\n            item.innerHTML = registers[k]\n        }\n    } else {\n\n    }\n}\n\nvar str_pad = function (hex) {\n    var zero = '0000';\n    var tmp = 4 - hex.length;\n    return '0X' + zero.substr(0, tmp) + hex.toUpperCase();\n}\n\nvar update_memory_table = function () {\n    // 不应该每次都重新获取对象刷新，应该是获取新内存然后修改值\n    // 刷新内存表格\n    if (axepu != null) {\n        // 只要虚拟机运行了，就有内存了\n        // 更新f1的位置\n        var f1 = parseInt(registers['f1'])\n        // 表格要显示的内容是系统栈的内容，所以，直接指定死就可以了\n        var stack_segment = memory.slice(0, 1024)\n        //不应该是在其中增加，应该是修改\n        for (var i = 0; i < stack_segment.length; ++i) {\n            var addr = i\n            var data = stack_segment[i]\n\n            var row = memory_table.rows[i + 1]\n            if (f1 == i) {\n                row.cells[0].setAttribute('style', 'background-color: red')\n            } else {\n                row.cells[0].removeAttribute('style')\n            }\n            row.cells[0].innerHTML = addr + ' [' + str_pad(addr.toString(16)) + ']'\n            row.cells[1].innerHTML = data + ' [' + str_pad(data.toString(16)) + ']'\n        }\n    } else {\n    }\n}\n\nvar highligh_current_line = function () {\n    // pa是当前行，除了pa以外其他都remove\n    if (running == true) {\n        for (var i = 0; i < mcode_lines.length; ++i) {\n            remove_highlight(asmEditor, mcode_lines[i])\n            remove_highlight(mcodeEditor, i)\n        }\n        if (pa < mcode_lines.length) {\n            highlight(asmEditor, mcode_lines[pa])\n            highlight(mcodeEditor, pa)\n        }\n    }\n}\n\nvar clear_all_highlight = function () {\n    for (var i = 0; i < mcode_lines.length; ++i) {\n        remove_highlight(asmEditor, mcode_lines[i])\n        remove_highlight(mcodeEditor, i)\n    }\n}\n\nvar finish_process = function () {\n    log('执行完成的pa:', pa)\n    var line = pa - 1\n    log('有效代码:', mcode_lines)\n    success_highlight(asmEditor, mcode_lines[line])\n    success_highlight(asmEditor, line)\n}\n\nvar showToast = (selector, style, innerHTML) => {\n    selector.addClass(style);\n    selector[0].innerHTML = innerHTML;\n    selector.fadeTo(2000, 500).slideUp(500, function () {\n        selector.hide();\n    });\n}\n\nvar run_next = function () {\n    axepu.do_next_ins()\n    pa = axepu.get_register('pa')\n    // log('【paPos】', paPos)\n\n    // 如果pa连续多次一样，就可以直接杀掉了\n    if (paPos.length >= 1000) {\n        paPos = []\n    } else {\n        paPos.push(pa)\n    }\n\n    // 判断paPos是不是连续为一样的值\n    // 从后往前找30个就可以了\n    const lastEle = paPos[paPos.length - 1]\n    let cnt = 0\n    for (let i = paPos.length - 1; i >= 0; i -= 1) {\n        if (lastEle === paPos[i]) {\n            cnt += 1\n        }\n        if (cnt >= 30) {\n            running = false\n            axepu = null\n            showToast($('#alert-div'), 'alert alert-danger', 'pa指向同一内存地址，可能超时！请重试')\n            log('timeout')\n        }\n    }\n    // if (paPos.filter(item => item == pa).length >= 50) {\n    // }\n\n    // log('pa:', pa, mcode_lines.length, paPos)\n    if (pa >= mcode_lines.length) {\n        running = false\n        axepu = null\n        log('结束')\n    }\n}\n\nvar update_mem_reg = function () {\n    if (axepu != null && running) {\n        registers = axepu.get_all_registers()\n        memory = axepu.get_memory()\n    }\n}\n\nvar update_table = function () {\n    update_registers_table()\n    // 刷新内存显示就 会耗时\n    update_memory_table()\n    // 高亮当前行\n    highligh_current_line()\n}\n\n// 需要用计时器来做监听，一旦鼠标点击的状态变了则更改运行状态\nsetInterval(function () {\n    // 更新寄存器表格\n    if (running == true) {\n        update_mem_reg()\n        update_table()\n\n        if (debug_mode == false) {\n            run_next()\n        }\n    }\n\n\n}, 1000 / 30)\n\n// 下一步按钮\n// 跳过按钮\n// 停止按钮\n// 重置按钮\n\n\nconst _main = () => {\n    var asm_code = `jump @1024\n.memory 1024\n\nset2 f1 3 ;一开始设置到栈顶\njump @function_end ;先去设置一下内存结构\n\n@function_multiply ;6\nset2 a3 2\nsave2 a1 @65534\n\n@while_start  ;15\ncompare a2 a3\njump_if_less @while_end\n\n; 用a2来给a3加1\nsave2 a2 @65532\nset2 a2 1\nadd2 a3 a2 a3\n\n; 把a1原来的值存起来在加\nload2 @65534 a2\nadd2 a1 a2 a1\n\nload2 @65532 a2\njump @while_start ;18\n@while_end ;47\n\nset2 a3 2\nsubtract2 f1 a3 f1\nload_from_register2 f1 a2\njump_from_register a2\n\n@function_end ;61\n\n;设置参数\nset2 a1 10\nset2 a2 3\n\nset2 a3 14 ;4字节,设置f1是调用函数之后返回的位置\nadd2 pa a3 a3 ;4字节\n\nsave_from_register2 a3 f1 ;3字节\nset2 a3 2 ;4字节\nadd2 f1 a3 f1 ;4字节\njump @function_multiply ;3字节,10\nhalt\n`\n\n    log('asm_code', asm_code)\n    asmEditor.setValue(asm_code)\n// 手动调用change\n    change_editor()\n}\n\n_main()\n"]}