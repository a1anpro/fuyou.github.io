{"version":3,"sources":["cpu/test/test_vm.js"],"names":["test_set","asm_code","memory","machine_code","axepu","run","AxePu","expect","get_register","assert","isArrayEqual","output","a1","test_save","fillZero","data","test_save2","length","test_load2","mem_data1","reg_data","a2","log","test_subtract2","test_save_from_register","mem_data2","mem_data","test_load_from_register","test_load_from_register2","test_jump_from_register","test_save_from_register2","test_jump_if_less","test_jump_if_less_2","test_jump_from_register_2","pa","test_jump","test_multiply","Math","pow","test_vm"],"mappings":"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","file":"../../../cpu/test/test_vm.js","sourcesContent":["var test_set = function() {\n    asm_code = `\n        set a1 1\n        halt\n    `\n    memory = machine_code(asm_code)\n    // log('memory:', memory)\n    // memory += [0] * (0x10000 - len(memory))\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a1 = axepu.get_register('a1')\n    //\n    expect = [1]\n    output = [a1]\n    // log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_set')\n}\n\nvar test_set2 = function() {\n    asm_code = `\n        set2 a1 288\n        halt\n    `\n    memory = machine_code(asm_code)\n    // log('memory:', memory)\n    // memory += [0] * (0x10000 - len(memory))\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a1 = axepu.get_register('a1')\n    //\n    expect = [288]\n    output = [a1]\n    // log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_set2')\n}\n\nvar test_save = function() {\n    asm_code = `\n        set a1 10\n        set a2 3\n        save a1 @100\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n    data = memory[100]\n    //\n    expect = [10]\n    output = [data]\n    // log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_save')\n}\n\nvar test_save2 = function() {\n    asm_code = `\n        set a1 10\n        set2 a2 3\n        save2 a2 @258\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    data = memory[258]\n    //\n    expect = [3]\n    output = [data]\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_save2')\n}\n\nvar test_load = function() {\n    asm_code = `\n        set a1 10\n        set a2 3\n        save a1 @100\n        load @100 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    data = memory[100]\n    a2 = axepu.get_register('a2')\n\n    expect = [10, 10]\n    output = [data, a2]\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_load')\n}\n\nvar test_load2 = function() {\n    asm_code = `\n        set2 a1 300\n        save2 a1 @260\n        load2 @260 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    mem_data1 = memory[260]\n    mem_data2 = memory[261]\n    a2 = axepu.get_register('a2')\n\n    expect = [44, 1, 300]\n    output = [mem_data1, mem_data2, a2]\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_load2')\n}\n\nvar test_add2 = function() {\n    asm_code = `\n        set2 a1 258\n        set a2 10\n        add2 a1 a2 a3\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    reg_data = axepu.get_register('a3')\n\n    expect = [268]\n    output = [reg_data]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_add2')\n}\n\nvar test_subtract2 = function() {\n    asm_code = `\n        set2 a1 288\n        set a2 10\n        subtract2 a1 a2 a3\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    reg_data = axepu.get_register('a3')\n\n    expect = [278]\n    output = [reg_data]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_subtract2')\n}\n\nvar test_save_from_register = function() {\n    // 将a1的低8位的值存入a2的低8位内存中\n    asm_code = `\n        set2 a1 288\n        set2 a2 100\n        save_from_register a1 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    mem_data = memory[100]\n\n    expect = [32]\n    output = [mem_data]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_save_from_register')\n}\n\nvar test_save_from_register2 = function() {\n    // 将a1的低8位的值存入a2的低8位内存中\n    asm_code = `\n        set2 a1 2000\n        set2 a2 2\n        save_from_register2 a1 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    mem_data1 = memory[2]\n    mem_data2 = memory[3]\n\n    expect = [208, 7]\n    output = [mem_data1, mem_data2]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_save_from_register2')\n}\n\nvar test_load_from_register = function() {\n    // 将a1的低8位的值存入a2的低8位内存中\n    asm_code = `\n        set2 a1 288\n        set2 a2 258\n        save2 a2 @32\n        load_from_register a1 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a2 = axepu.get_register('a2')\n\n    expect = [2]\n    output = [a2]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_load_from_register')\n}\n\nvar test_load_from_register2 = function() {\n    asm_code = `\n        set2 a1 288\n        set2 a2 258\n        save2 a2 @288\n        load_from_register2 a1 a2\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a2 = axepu.get_register('a2')\n\n    expect = [258]\n    output = [a2]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_load_from_register2')\n}\n\nvar test_jump_from_register = function() {\n    asm_code = `\n        set a1 9\n        jump_from_register a1\n        set a2 2\n        halt\n\n        set a2 10\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a2 = axepu.get_register('a2')\n\n    expect = [10]\n    output = [a2]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump_from_register')\n}\n\nvar test_jump_from_register_2 = function() {\n    asm_code = `\n        set2 a1 14\n        set2 a2 157\n        jump_from_register a1\n        set2 a1 123\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a1 = axepu.get_register('a1')\n    a2 = axepu.get_register('a2')\n    pa = axepu.get_register('pa')\n\n    expect = [14, 157, 15]\n    output = [a1, a2, pa]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump_from_register_2')\n}\n\nvar test_jump = function() {\n    asm_code = `\n        set a1 5\n        jump @label1\n\n        @label1\n        set a2 2\n        add a1 a2 a1\n        save a1 @100\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    mem_data = memory[100]\n\n    expect = [7]\n    output = [mem_data]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump')\n}\n\nvar test_jump_if_less = function() {\n    asm_code = `\n        set a1 5\n        set a2 10\n        compare a1 a2\n        jump_if_less @label1\n\n        @label1\n        set a1 1\n        set a2 99\n        add a1 a2 a1\n        save a1 @100\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    mem_data = memory[100]\n    expect = [100]\n    output = [mem_data]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump_if_less')\n}\n\nvar test_jump_if_less_2 = function() {\n    asm_code = `\n        set2 a1 288\n        set2 a2 157\n        compare a1 a2\n        jump_if_less @label1\n        set2 a1 100\n        @label1\n\n        halt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 1024-memory.length)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a1 = axepu.get_register('a1')\n    a2 = axepu.get_register('a2')\n\n\n    expect = [100, 157]\n    output = [a1, a2]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump_if_less_2')\n}\n\nvar test_multiply = function() {\n    asm_code = `jump @1024\n.memory 1024\n\nset2 f1 3 ;一开始设置到栈顶\njump @function_end ;先去设置一下内存结构\n\n@function_multiply ;6\nset2 a3 2\nsave2 a1 @65534\n\n@while_start  ;15\ncompare a2 a3\njump_if_less @while_end\n\n; 用a2来给a3加1\nsave2 a2 @65532\nset2 a2 1\nadd2 a3 a2 a3\n\n; 把a1原来的值存起来在加\nload2 @65534 a2\nadd2 a1 a2 a1\n\nload2 @65532 a2\njump @while_start ;18\n@while_end ;47\n\nset2 a3 2\nsubtract2 f1 a3 f1\nload_from_register2 f1 a2\njump_from_register a2\n\n@function_end ;61\n\n;设置参数\nset2 a1 10\nset2 a2 3\n\nset2 a3 14 ;4字节,设置f1是调用函数之后返回的位置\nadd2 pa a3 a3 ;4字节\n\nsave_from_register2 a3 f1 ;3字节\nset2 a3 2 ;4字节\nadd2 f1 a3 f1 ;4字节\njump @function_multiply ;3字节,10\nhalt\n    `\n    memory = machine_code(asm_code)\n    memory = fillZero(memory, 2 ** 16-memory.length)\n    // log('len:', memory)\n\n    var axepu = new AxePu(memory)\n    axepu.run()\n\n    a1 = axepu.get_register('a1')\n\n    output = [a1]\n    expect = [990]\n\n    log('output:', output)\n    assert(isArrayEqual(expect, output), '[vm] test_jump_if_less_2')\n}\n\n\nvar test_vm = function() {\n    // test_set()\n    // test_set2()\n    // test_save()\n    // test_save2()\n    // test_load2()\n    // test_add2()\n    // test_subtract2()\n    // test_save_from_register()\n    // test_save_from_register2()\n    // test_load_from_register()\n    // test_load_from_register2()\n    // test_jump_from_register()\n    // test_jump()\n    // test_jump_if_less()\n    // test_jump_if_less_2()\n    // test_jump_from_register_2()\n    test_multiply()\n}\n"]}