{"version":3,"sources":["cpu/test/test_asm.js"],"names":["asm_test_clean_line","asm_code","ret","clear_line","log","asm_test_pre_process","pre_process","machine_code","asm_test_xv16_set","asm","output","expected","assert","isArrayEqual","asm_test_xv16_set2","asm_test_xv16_save","asm_test_xv16_save2","asm_test_xv16_compare","asm_test_xv16_jump_if_less","asm_test_xv16_jump","asm_test_xv16_save_from_register","asm_test_xv16_halt","asm_test_set2_load2_save2","asm_test_xv16_subtract2","asm_test_load_from_register","asm_test_jump_from_register","asm_test_annotation","asm_test_dot_memory","asm_test_dot_var","asm_test_dot_assign","asm_test_xv16_load_and_load2","asm_test_dot_call_function","asm_test_factorial","asm_test_load_from_register2","asm_test_save_from_register2","asm_test_subtract2_jump","asm_test_dot_call","asm_test_dot_return","asm_test_dot_function","asm_test_dot_load","asm_test_dot_end_function","asm_test_return_func","asm_test_fake_add","asm_test_multiply","asm_test_same_var_name","test_asm"],"mappings":"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","file":"../../../cpu/test/test_asm.js","sourcesContent":["var asm_test_clean_line = function(){\n    asm_code = `\n        set a1 288 ;你好啊\n    `\n    ret = clear_line(asm_code)\n    log(ret)\n}\n\nvar asm_test_pre_process = function(){\n    asm_code = `\n        ;这是注释\n        set a1 288 ;你好啊\n        set a1 288 ;你好啊\n        set a1 288 ;你好啊\n    `\n    ret = pre_process(asm_code)\n    log(ret)\n}\n\nvar asm_test_machine_code = function(){\n    asm_code = `\n        set a1 288 ;你好啊\n    `\n    ret = machine_code(asm_code)\n}\n\nvar asm_test_xv16_set = function(){\n    asm = `\n            set a1 288\n    `\n    // 先低后高\n    expected = [\n        0, 16, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'set error')\n}\n\nvar asm_test_xv16_set2 = function(){\n    asm = `\n            set2 a1 288\n    `\n    // 先低后高\n    expected = [\n        8, 16, 32, 1,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'set2 error')\n}\n\nvar asm_test_xv16_load = function(){\n    asm = `\n        set a1 288\n        load @258 a1\n    `\n    // 先低后高\n    expected = [\n        0, 16, 32,\n        1, 2, 16,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'load error')\n}\n\nvar asm_test_xv16_load2 = function(){\n    asm = `\n        set a1 0xbaef\n        load2 @258 a1\n    `\n    // 先低后高\n    expected = [\n        0, 16, 239,\n        9, 2, 1, 16,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'load2 error')\n}\n\nvar asm_test_xv16_add = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        add a1 a2 a1\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        2, 16, 32, 16,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'add error')\n}\n\nvar asm_test_xv16_save = function(){\n    asm = `\n        set a1 1\n        save a1 @258\n        save a1 @387\n        save a1 @128\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        3, 16, 2,\n        3, 16, 131,\n        3, 16, 128,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'save error')\n}\n\nvar asm_test_xv16_save2 = function(){\n    asm = `\n    set2 a1 258\n    save2 a1 @258\n    save2 a1 @387\n    save2 a1 @128\n    `\n    // 先低后高\n    expected = [\n        8, 16, 2, 1,\n        11, 16, 2, 1,\n        11, 16, 131, 1,\n        11, 16, 128, 0,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'save2 error')\n}\n\nvar asm_test_xv16_compare = function(){\n    asm = `\n    set a1 1\n    set a2 2\n    compare a1 a2\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        4, 16, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'compare error')\n}\n\nvar asm_test_xv16_jump_if_less = function(){\n    asm = `\n            set2 a1 288\n            set2 a2 157\n            compare a1 a2\n            jump_if_less @label1\n            set2 a1 100\n            @label1\n            halt\n    `\n    // 先低后高\n    expected = [\n        8, 16, 32, 1,\n       8, 32, 157, 0,\n       4, 16, 32,\n       5, 18, 0,\n       8, 16, 100, 0,\n       255,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'jump_if_less error')\n}\n\nvar asm_test_xv16_jump = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        jump @label1\n        @label1\n\n        set2 a1 10\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        6, 9, 0,\n        8, 16, 10, 0,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'jump error')\n}\n\nvar asm_test_xv16_save_from_register = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        save_from_register a1 a2\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        7, 16, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'save_from_register error')\n}\n\nvar asm_test_xv16_halt = function(){\n    asm = `\n    set a1 1\n        set a2 2\n        halt\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        255,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'halt error')\n}\n\nvar asm_test_set2_load2_save2 = function(){\n    asm = `\n    set2 a1 288\n    load2 @599 a1\n    save2 a1 @777\n    `\n    // 先低后高\n    expected = [\n        8, 16, 32, 1,\n        9, 87, 2, 16,\n        11, 16, 9, 3,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'set2_load2_save2 error')\n}\n\nvar asm_test_xv16_load_and_load2 = function(){\n    asm = `\n        load @100 a1\n        load2 @100 a2\n    `\n    // 先低后高\n    expected = [\n        1, 100, 16,\n        9, 100, 0, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'load_and_load2 error')\n}\n\nvar asm_test_xv16_subtract2 = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        subtract2 f1 a3 f1\n    `\n    // 先低后高\n    expected = [\n       0, 16, 1,\n       0, 32, 2,\n       12, 80, 48, 80,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'subtract2 error')\n}\n\nvar asm_test_load_from_register = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        load_from_register f1 a2\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        13, 80, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'load_from_register error')\n}\n\nvar asm_test_load_from_register2 = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        load_from_register f1 a2\n        load_from_register2 f1 a2\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        13, 80, 32,\n        14, 80, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'load_from_register2 error')\n}\n\nvar asm_test_save_from_register2 = function(){\n    asm = `\n        set2 a1 1\n        set2 a2 2\n        save_from_register2 a1 a2\n    `\n    // 先低后高\n    expected = [\n        8, 16, 1, 0,\n        8, 32, 2, 0,\n        15, 16, 32,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'save_from_register2 error')\n}\n\nvar asm_test_subtract2_jump = function(){\n    asm = `\n        set2 a1 1\n        set a2 2\n        subtract2 a1 a2 a1\n        compare a1 a2\n        jump @label1\n\n        @label1\n        halt\n    `\n    // 先低后高\n    expected = [\n        8, 16, 1, 0,\n        0, 32, 2,\n        12, 16, 32, 16,\n        4, 16, 32,\n        6, 17, 0,\n        255,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'subtract2_jump error')\n}\n\nvar asm_test_jump_from_register = function(){\n    asm = `\n        set a1 1\n        set a2 2\n        jump_from_register a1\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        16, 16,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'jump_from_register error')\n}\n\n\nvar asm_test_annotation = function(){\n    asm = `\n        ; 这是注释\n        set a1 1 ;这是注释\n        set a2 2\n        jump_from_register a1\n    `\n    // 先低后高\n    expected = [\n        0, 16, 1,\n        0, 32, 2,\n        16, 16,\n    ]\n    output = machine_code(asm)\n    // log(\"output:\", output)\n    assert(isArrayEqual(output, expected), 'annotation error')\n}\nvar asm_test_dot_memory = function(){\n    asm = `\n        .memory 1024\n    `\n    output = machine_code(asm)\n    log(\"output:\", output)\n    // assert(isArrayEqual(output, expected), 'annotation error')\n}\nvar asm_test_dot_call = function(){\n    asm = `\n        .call @function1\n        @function1\n        set2 a1 2\n        halt\n    `\n    output = machine_code(asm)\n    log(\"output:\", output)\n    // assert(isArrayEqual(output, expected), 'annotation error')\n}\nvar asm_test_dot_return = function(){\n    asm = `\n        .call @function1\n        @function1\n        set2 a1 10\n        set2 a2 2\n        save_from_register2 a1 f1\n        add2 f1 a2 f1\n        .return 2\n\n        halt\n    `\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\n\n// 基础伪指令测试\nvar asm_test_dot_function = function(){\n    asm = `\n    .function main x y\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_dot_var = function(){\n    asm = `\n    .function main\n    .var yanhui 10\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_dot_load = function(){\n    asm = `\n    .function main\n    .var yanhui 10\n    .var temp 20\n    .load temp a1\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_dot_assign = function(){\n    // .assign reg name\n    asm = `\n    .function main\n    .var yanhui 99\n    .var temp 20\n    .load yanhui a1\n\n    .assign a1 temp\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_dot_end_function = function(){\n    asm = `\n    .function main x y\n\n    .end_function main\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_dot_call_function = function(){\n    asm = `\n    jump @1024\n    .memory 1024\n    set2 f1 3 ;一开始设置到栈顶\n    jump #main ;直接跳到main函数\n\n    .function function_add x y\n        .return_func\n    .end_function function_add\n\n    .function main\n        .var yanhui 213\n        .var iris 34\n        .call_function function_add yanhui yanhui\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_return_func = function(){\n    asm = `\n    .init\n\n    .function function_add x y\n    .return_func\n    .end_function function_add\n\n    .function main\n        .var yanhui 213\n        .var iris 34\n        .call_function function_add yanhui yanhui\n\n        .return_func\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\nvar asm_test_fake_add = function(){\n    asm = `\n    .init\n\n    .function function_add x y\n    .var sum 0\n    .add x y sum\n    .return_func sum\n    .end_function function_add\n\n    .function main\n    .var a 199\n    .var b 3\n    .call_function function_add a b\n\n    .load_return sum\n    .load sum a2\n\n    .return_func\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\n// 综合测试\n// 乘法测试\nvar asm_test_multiply = function(){\n    asm = `\n    jump @1024\n    .memory 1024\n    set2 f1 3 ;一开始设置到栈顶\n    jump #main ;直接跳到main函数\n\n    .function function_multiply x y\n    .var i 0\n    .var sum 0\n\n    ;首先比较i和y的大小，目前比较大小只能用寄存器\n    ;目前左右运算符都需要在寄存器中使用\n    @while_start\n    .load i a1\n    .load y a2\n    compare a1 a2\n    jump_if_less @while_block\n    jump @while_end\n\n    @while_block\n    .add x sum sum\n    .add i 1 i\n    jump @while_start\n    @while_end\n\n    .return_func sum\n    .end_function function_multiply\n\n    .function main\n    .var a 30\n    .var b 3\n    .call_function function_multiply a b\n    .load_return sum\n    .load sum a2\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\n// 不同作用域，相同变量名\nvar asm_test_same_var_name = function(){\n    asm = `\n    jump @1024\n    .memory 1024\n    set2 f1 3 ;一开始设置到栈顶\n    jump #main ;直接跳到main函数\n\n    .function func para\n    .var name 100\n    .return_func\n    .end_function func\n\n    .function main\n    .var para 10\n    .call_function func para\n\n    ; main函数不用做这步 .return_func\n\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\n\n// 阶乘测试\nvar asm_test_factorial = function(){\n    asm = `\n    jump @1024\n    .memory 1024\n    set2 f1 3 ;一开始设置到栈顶\n    jump #main ;直接跳到main函数\n\n    .function function_multiply x y\n    .var i 0\n    .var sum 0\n\n    ;首先比较i和y的大小，目前比较大小只能用寄存器\n    ;目前左右运算符都需要在寄存器中使用\n    @while_start\n    .load i a1\n    .load y a2\n    compare a1 a2\n    jump_if_less @while_block\n    jump @while_end\n\n    @while_block\n    .load x a1\n    .load sum a2\n    add2 a1 a2 a2\n    .assign a2 sum ;将计算的临时和放入sum\n\n    .load i a1\n    set2 a2 1\n    add2 a1 a2 a1\n    .assign a1 i\n    jump @while_start\n    @while_end\n\n    .return_func sum\n    .end_function function_multiply\n\n\n    .function main\n    .var a 30\n    .var b 3\n    .var ans 100\n\n    .add a b ans\n\n    .load ans a2\n    halt\n`\n    output = machine_code(asm)\n    log(\"output:\", output)\n}\n\n\n\n// 基础伪指令\n// 1: .var name 10\n// 2: .load name reg\n// 3: .assign reg name\n// 4: .function function_name paras[]\n// 5: .end_function function_name\n// 5: .call_function function_name paras[]\n// 6: .return_func name\n\nvar test_asm = function(){\n    // 运算伪指令\n    // asm_test_dot_add()\n\n    // 基础伪指令\n    // asm_test_dot_function()\n    // asm_test_dot_var()\n    // asm_test_dot_end_function()\n    // asm_test_dot_load()\n    // asm_test_dot_assign()\n    // asm_test_dot_call_function()\n    // asm_test_return_func()\n    asm_test_fake_add()\n\n    // 综合测试\n    // asm_test_same_var_name()\n    // asm_test_multiply()\n\n    // asm_test_dot_return()\n    // asm_test_dot_call()\n    // asm_test_dot_memory()\n    // asm_test_xv16_set()\n    // asm_test_xv16_set2()\n    // asm_test_xv16_load()\n    // asm_test_xv16_load2()\n    // asm_test_xv16_add()\n    // asm_test_xv16_save()\n    // asm_test_xv16_save2()\n    // asm_test_xv16_compare()\n    // asm_test_xv16_jump_if_less()\n    // asm_test_xv16_jump()\n    // asm_test_xv16_save_from_register()\n    // asm_test_xv16_halt()\n    // asm_test_set2_load2_save2()\n    // asm_test_xv16_load_and_load2()\n    // asm_test_xv16_subtract2()\n    // asm_test_load_from_register()\n    // asm_test_load_from_register2()\n    // asm_test_save_from_register2()\n    // asm_test_subtract2_jump()\n    // asm_test_jump_from_register()\n    // asm_test_annotation()\n}\n"]}