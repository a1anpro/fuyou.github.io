{"version":3,"sources":["cpu/x16vm.js"],"names":["debug","debug_print","log","apply","arguments","AxePu","memory","_classCallCheck","this","registers","pa","a1","a2","a3","c1","f1","reg_mapper","get_reg_mapper","length","m_reg","reg","data","low","high","restore_from_little","mem_addr","apart_data","high_data","low_data","reg1","m_reg1","reg2","m_reg2","m_reg3","reg3","read_low_8bit","data2","data1","alert","window","state","do_next_ins"],"mappings":"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","file":"../../cpu/x16vm.js","sourcesContent":["var debug = true\nvar debug_print = function(...args){\n    if (debug == true){\n        log(...args)\n    }\n}\n\nclass AxePu{\n    // 参数给constructor\n    constructor(memory){\n        // 不需要instructions\n        this.registers = {\n            \"pa\": 0,\n            \"a1\": 0,\n            \"a2\": 0,\n            \"a3\": 0,\n            \"c1\": 0,\n            \"f1\": 0,\n        }\n        this.reg_mapper = get_reg_mapper()\n        this.memory = memory\n    }\n\n    // static new(memory){\n    //   var i = new this(memory)\n    //   return i\n    // }\n\n    do_next_ins(){\n        var pa = this.registers['pa']\n\n        if (pa >= this.memory.length){\n            return false\n        }\n        // log('memory[pa]:', memory[pa])\n        var memory = this.memory\n        // 执行一个指令前，先移动pa\n        if (memory[pa] == 0b00000000){\n            log('竟然走到了set这里,pa=', pa, memory[pa])\n            // set\n            // 先设置pa到下一条指令地址\n            this.registers['pa'] += 3\n            // 需要寄存器机器码和寄存器名对应\n            let m_reg = memory[pa + 1]\n            let reg = this.reg_mapper[m_reg]\n\n            let data = memory[pa + 2]\n            this.registers[reg] = data\n            // log('a1:', this.registers['a1'])\n            debug_print('set ', reg, data)\n        } else if (memory[pa] == 0b00001000){\n            // set2\n            this.registers['pa'] += 4\n            let m_reg = memory[pa + 1]\n            let reg = this.reg_mapper[m_reg]\n\n            // 拼接数据\n            let low = memory[pa + 2]\n            let high = memory[pa + 3]\n            let data = restore_from_little(low, high)\n            this.registers[reg] = data\n\n            debug_print('set2 ', reg, data)\n        } else if (memory[pa] == 0b00000011){\n            // save 寄存器1 内存地址\n            // log('执行save:', memory)\n            this.registers['pa'] += 3\n            let m_reg = memory[pa + 1]\n            let reg = this.reg_mapper[m_reg]\n\n            // 存单字节地址即可\n            let mem_addr = memory[pa + 2]\n            memory[mem_addr] = this.registers[reg]\n            debug_print('save', reg, mem_addr)\n        } else if (memory[pa] == 0b00001011){\n            // save2 寄存器 内存地址\n            this.registers['pa'] += 4\n            let m_reg = memory[pa + 1]\n            let reg = this.reg_mapper[m_reg]\n\n            // # 拼接16位地址\n            let low = memory[pa + 2]\n            let high = memory[pa + 3]\n            let mem_addr = restore_from_little(low, high)\n\n            // # 高低八位的值分别存入高低内存，将reg的值拆分\n            let data = this.registers[reg]\n            data = apart_data(data)\n            memory[mem_addr] = data[0]\n            memory[mem_addr + 1] = data[1]\n\n            debug_print('save2', reg, mem_addr)\n        } else if (memory[pa] == 0b00000001){\n            // load 内存 寄存器\n            this.registers['pa'] += 3\n\n            // 只读一字节地址\n            let mem_addr = memory[pa + 1]\n            let m_reg = memory[pa + 2]\n            let reg = this.reg_mapper[m_reg]\n\n            this.registers[reg] = memory[mem_addr]\n\n            debug_print('load', mem_addr, reg)\n        } else if (memory[pa] == 0b00001001){\n            // load2 内存 寄存器\n            this.registers['pa'] += 4\n            // 拼接地址\n            let mem_addr = restore_from_little(memory[pa + 1], memory[pa + 2])\n            // 拼接地址对应的数据，高低8位\n            let low_data = memory[mem_addr]\n            let high_data = memory[mem_addr + 1]\n            let data = restore_from_little(low_data, high_data)\n\n            let m_reg = memory[pa + 3]\n            let reg = this.reg_mapper[m_reg]\n\n            // 寄存器是16位的，存的数据应该是两个内存组装的值\n            this.registers[reg] = data\n\n            debug_print('load2', mem_addr, reg)\n        } else if (memory[pa] == 0b00001010){\n            // add2\n            this.registers['pa'] += 4\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            let m_reg3 = memory[pa + 3]\n            let reg3 = this.reg_mapper[m_reg3]\n\n            this.registers[reg3] = this.registers[reg1] + this.registers[reg2]\n            debug_print('add2', reg1, reg2, reg3)\n        } else if (memory[pa] == 0b00000010){\n            // add\n            this.registers['pa'] += 4\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            let m_reg3 = memory[pa + 3]\n            let reg3 = this.reg_mapper[m_reg3]\n\n            this.registers[reg3] = this.registers[reg1] + this.registers[reg2]\n\n            debug_print('add', reg1, reg2, reg3)\n        } else if (memory[pa] == 0b00001100){\n            // subtract2\n            this.registers['pa'] += 4\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            let m_reg3 = memory[pa + 3]\n            let reg3 = this.reg_mapper[m_reg3]\n\n            this.registers[reg3] = this.registers[reg1] - this.registers[reg2]\n\n            debug_print('subtract2', reg1, reg2, reg3)\n        } else if (memory[pa] == 0b00000111){\n            // save_from_register\n            this.registers['pa'] += 3\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            let mem_addr = read_low_8bit(this.registers[reg2])\n            memory[mem_addr] = read_low_8bit(this.registers[reg1])\n\n            debug_print('save_from_register', reg1, reg2)\n        } else if (memory[pa] == 0b00001111){\n            // save_from_register2\n            this.registers['pa'] += 3\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            // 寄存器reg1存的是值，reg2存的是地址\n            // 值是16位的，地址也是16位的，所以要把值拆成高低8位\n\n            let mem_addr = this.registers[reg2]\n            let data = this.registers[reg1]\n            data = apart_data(data)\n            debug_print('data[0]\\[1]:', data[0], data[1])\n            memory[mem_addr] = data[0]\n            memory[mem_addr + 1] = data[1]\n\n            debug_print('save_from_register2', reg1, reg2)\n        } else if (memory[pa] == 0b00001101){\n            // load_from_register\n            // 把第一个寄存器的内存地址的值 放入第二个寄存器的中\n            this.registers['pa'] += 3\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            // 此时reg1是一个内存地址，地址可能大于255，只留低8位\n            // 内存的值也可能是大于255，也只留低8位\n            let mem_addr = read_low_8bit(this.registers[reg1])\n\n            this.registers[reg2] = read_low_8bit(memory[mem_addr])\n\n            debug_print('load_from_register', reg1, reg2)\n        } else if (memory[pa] == 0b00001110){\n            this.registers['pa'] += 3\n\n            // load的也是需要组合的\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n\n            let mem_addr = this.registers[reg1]\n            let low = memory[mem_addr]\n            let high = memory[mem_addr + 1]\n            let data = restore_from_little(low, high)\n            this.registers[reg2] = data\n\n            debug_print('load_from_register2', reg1, reg2)\n        } else if (memory[pa] == 0b00010000){\n            // jump_from_register\n           let m_reg1 = memory[pa + 1]\n           let reg1 = this.reg_mapper[m_reg1]\n\n           this.registers['pa'] = this.registers[reg1]\n\n           debug_print('jump_from_register', reg1, this.registers[reg1])\n        } else if (memory[pa] == 0b00000110){\n            // jump\n            let low = memory[pa + 1]\n            let high = memory[pa + 2]\n            let mem_addr = restore_from_little(low, high)\n\n            this.registers['pa'] = mem_addr\n            debug_print('jump', mem_addr)\n        } else if (memory[pa] == 0b00000101){\n            // jump_if_less\n           let low = memory[pa + 1]\n           let high = memory[pa + 2]\n           let mem_addr = restore_from_little(low, high)\n\n           let c1 = this.registers['c1']\n           if (c1 == 2){  // 第一个参数小于第二个参数\n               this.registers['pa'] = mem_addr\n           } else{\n               this.registers['pa'] += 3\n           }\n           debug_print('jump_if_less', mem_addr)\n        } else if (memory[pa] == 0b00000100){\n            // compare\n            this.registers['pa'] += 3\n\n            let m_reg1 = memory[pa + 1]\n            let reg1 = this.reg_mapper[m_reg1]\n            let data1 = this.registers[reg1]\n\n            let m_reg2 = memory[pa + 2]\n            let reg2 = this.reg_mapper[m_reg2]\n            let data2 = this.registers[reg2]\n\n            if (data1 < data2){\n                this.registers['c1'] = 2\n            } else if (data1 > data2){\n                this.registers['c1'] = 1\n            } else{\n                this.registers['c1'] = 0\n            }\n            debug_print('compare', reg1, reg2)\n        } else if (memory[pa] == 0xff){\n            this.registers['pa'] += 1\n            debug_print('halt, ', this.registers['pa'])\n            // return false\n        } else {\n            debug_print('指令错误的pa:', pa, memory[pa])\n            window.alert('错误指令')\n            return false\n        }\n\n        this.memory = memory\n        return true\n    }\n\n    get_all_registers(reg){\n        // 返回所有寄存器\n        return this.registers\n    }\n    get_register(reg){\n        // 返回指定寄存器值\n        return this.registers[reg]\n    }\n    get_memory(reg){\n        return this.memory\n    }\n\n    run(){\n        var state = true\n\n        while (state == true){\n            state = this.do_next_ins()\n        }\n        return this.memory\n    }\n}"]}