{"version":3,"sources":["popstar/index.js"],"names":["genRandom","Math","floor","random","CELL_SIZE","IMG_MAPPER","1","2","3","4","5","6","STATUS_STATIC","STATUS_DYNAMIC","STATUS_DISPOSABLE","number_config","x","y","width","height","8","static_config","count","index","background","name","numbers","path","dynamic_brown","dynamic_config","dynamic_bird","dynamic_fox","dynamic_frog","dynamic_hippo","highlight_config","highlight_bird","highlight_brown","highlight_fox","highlight_frog","MOUSE_TYPE","highlight_hippo","w","h","i","t","j","push","RIGHT_CLICK","output","drawVerticalLine","ctx","lineNum","length","beginPath","strokeStyle","moveTo","lineTo","closePath","stroke","drawHorizontalLine","size","number","n","clearSquare","fillStyle","fillRect","offsetY","drawGrid","e","alive","staticConf","dynamic","gameCtx","drawImage","images","drawText","arroundArray","mousePosition","update","xOffset","_","findIndex","o","id","yOffset","a","isUndefined","log","getHighlightAnimation","config","setBubble","listenDrop","k","start","end","tag","l","gameMap","step","drop","renderSquare","setInterval","startPos","endPos","draw","endY","getPos","ceil","removeAround","type","LEFT_CLICK","handleDoubleClick","event","button","_getPos2","_slicedToArray","offsetX","highlightAround","currentE","statusMap","forEach","d","newE","newX","newY","status","handleSingleClick","arrayEquals","beforeMousePosition","direction","getEmptySquare","bindEventDelegate","canvas","addEventListener","initGlobalData","gameOver","firstClick","gameCanvas","getContext","_start","getSquare","square","getStaticElement","cloneDeep","genMap","_init","loadAssets","container","names","Object","keys","src","img","onload","_loop","_objectSpread","assets","_main","run"],"mappings":"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","file":"../../popstar/index.js","sourcesContent":["const genRandom = () => {\n    return Math.floor(Math.random() * Math.floor(9))\n}\nconst CELL_SIZE = 80\n\n// 随机数对应的图片名\nconst IMG_MAPPER = {\n    1: 'bird',\n    2: 'brown',\n    3: 'fox',\n    4: 'frog',\n    5: 'hippo',\n    6: 'owl',\n}\n\nconst STATUS_STATIC = 1\nconst STATUS_DYNAMIC = 2\nconst STATUS_DISPOSABLE = 3\n\nconst number_config = {\n    1: {\n        x: 96,\n        y: 80,\n        width: 36,\n        height: 40,\n    },\n\n    4: {\n        x: 0,\n        y: 0,\n        width: 36,\n        height: 40,\n    },\n    8: {\n        x: 0,\n        y: 42,\n        width: 36,\n        height: 40,\n    },\n    2: {\n        x: 0,\n        y: 80,\n        width: 36,\n        height: 40,\n    },\n\n    6: {\n        x: 34,\n        y: 0,\n        width: 36,\n        height: 40,\n    },\n    7: {\n        x: 34,\n        y: 42,\n        width: 36,\n        height: 40,\n    },\n    5: {\n        x: 34,\n        y: 80,\n        width: 30,\n        height: 40,\n    },\n\n    9: {\n        x: 68,\n        y: 0,\n        width: 36,\n        height: 40,\n    },\n    0: {\n        x: 68,\n        y: 42,\n        width: 36,\n        height: 40,\n    },\n    3: {\n        x: 68,\n        y: 80,\n        width: 26,\n        height: 40,\n    },\n}\n\nconst static_config = {\n    // 静态图\n    //\n    numbers: {\n        name: 'numbers',\n        path: './static/numbers.png',\n        width: 116,\n        height: 118,\n        count: 1,\n        index: 0,\n    },\n    // bg\n    background: {\n        name: 'background',\n        path: './static/background.png',\n        width: 720,\n        height: 1280,\n        count: 1,\n        index: 0,\n    },\n    // wall\n    wall: {\n        name: 'wall',\n        path: './static/wall.png',\n        width: 75,\n        height: 75,\n        count: 1,\n        index: 0,\n    },\n    bird: {\n        name: 'bird',\n        path: './static/bird.png',\n        width: 65,\n        height: 65,\n        count: 1,\n        index: 0,\n    },\n    brown: {\n        name: 'brown',\n        path: './static/brown.png',\n        width: 68,\n        height: 65,\n        count: 1,\n        index: 0,\n    },\n    fox: {\n        name: 'fox',\n        path: './static/fox.png',\n        width: 71,\n        height: 63,\n        count: 1,\n        index: 0,\n    },\n    frog: {\n        name: 'frog',\n        path: './static/frog.png',\n        width: 69,\n        height: 65,\n        count: 1,\n        index: 0,\n    },\n    hippo: {\n        name: 'hippo',\n        path: './static/hippo.png',\n        width: 63,\n        height: 64,\n        count: 1,\n        index: 0,\n    },\n}\n\n// 动态图\nconst dynamic_config = {\n    dynamic_bird: {\n        name: 'dynamic_bird',\n        path: './static/animation/dynamic_bird.png',\n        width: 66,\n        height: 65,\n        count: 10,\n        // 当前访问的第几张\n        index: 0,\n    },\n    dynamic_brown: {\n        name: 'dynamic_brown',\n        path: './static/animation/dynamic_brown.png',\n        width: 70,\n        height: 65,\n        count: 10,\n        index: 0,\n    },\n    dynamic_fox: {\n        name: 'dynamic_fox',\n        path: './static/animation/dynamic_fox.png',\n        width: 68,\n        height: 63,\n        count: 7,\n        index: 0,\n    },\n    dynamic_frog: {\n        name: 'dynamic_frog',\n        path: './static/animation/dynamic_frog.png',\n        width: 70,\n        height: 65,\n        count: 9,\n        index: 0,\n    },\n    dynamic_hippo: {\n        name: 'dynamic_hippo',\n        path: './static/animation/dynamic_hippo.png',\n        width: 64,\n        height: 65,\n        count: 8,\n        index: 0,\n    },\n    dynamic_bubble: {\n        name: 'dynamic_bubble',\n        path: './static/animation/dynamic_bubble.png',\n        width: 94,\n        height: 75,\n        count: 2,\n        index: 1,\n    },\n\n}\n\nconst highlight_config = {\n    // 边框高亮的动画\n    // 图片名对应路径\n    highlight_bird: {\n        name: 'highlight_bird',\n        path: './static/animation/highlight_bird.png',\n        width: 77,\n        height: 75,\n        count: 4,\n        index: 0,\n    },\n    highlight_brown: {\n        name: 'highlight_brown',\n        path: './static/animation/highlight_brown.png',\n        width: 78,\n        height: 68,\n        count: 8,\n        index: 0,\n    },\n    highlight_fox: {\n        name: 'highlight_fox',\n        path: './static/animation/highlight_fox.png',\n        width: 77,\n        height: 70,\n        count: 4,\n        index: 0,\n    },\n    highlight_frog: {\n        name: 'highlight_frog',\n        path: './static/animation/highlight_frog.png',\n        width: 81,\n        height: 70,\n        count: 7,\n        index: 0,\n    },\n    highlight_hippo: {\n        name: 'highlight_hippo',\n        path: './static/animation/highlight_hippo.png',\n        width: 75,\n        height: 70,\n        count: 5,\n        index: 0,\n    },\n}\n\nconst MOUSE_TYPE = {\n    LEFT_CLICK: 0,\n    RIGHT_CLICK: 2,\n}\n\nconst getEmptySquare = (w, h) => {\n    let output = []\n    for (let i = 0; i < h; i++) {\n        let t = []\n        for (let j = 0; j < w; j++) {\n            t.push(0)\n        }\n        output.push(t)\n    }\n    return output\n}\n\nconst drawVerticalLine = (ctx, lineNum, length) => {\n    const size = 80\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"black\"\n    for (let j = 0; j <= lineNum; j++) {\n        ctx.moveTo(size * j, 0);\n        ctx.lineTo(size * j, length);\n    }\n    ctx.closePath();\n    ctx.stroke();\n}\n\nconst drawHorizontalLine = (ctx, lineNum, length) => {\n    const size = 80\n    ctx.beginPath();\n    ctx.strokeStyle = \"black\"\n    for (let j = 0; j <= lineNum; j++) {\n        ctx.moveTo(0, j * size);\n        ctx.lineTo(length, j * size);\n    }\n    ctx.closePath();\n    ctx.stroke();\n}\n\nconst drawText = (ctx, number, i, j) => {\n    // ctx.font = \"bold 50px Arial\"\n    // ctx.fillStyle = 'red'\n    // ctx.fillText(text, 25 + i * 80, 60 + j * 80)\n\n    const n = number_config[number]\n    const {x, y, width, height} = n\n    const offsetX = (CELL_SIZE - width) / 2\n    const offsetY = (CELL_SIZE - height) / 2\n    ctx.drawImage(images['numbers'], x, y, width, height, j * 80 + offsetX - 5, i * 80 + offsetY, width + 20, height + 20)\n}\n\n// 画网格\nconst drawGrid = (ctx) => {\n    drawVerticalLine(ctx, 10, 800)\n    drawHorizontalLine(ctx, 10, 800)\n}\n\nconst clearSquare = (ctx) => {\n    ctx.fillStyle = '#dee0e1';\n    ctx.fillRect(0, 0, width * CELL_SIZE, height * CELL_SIZE)\n    // 画墙\n    // for (let i = 0; i < 10; i++) {\n    //     for (let j = 0; j < 10; j++) {\n    //         ctx.drawImage(images['wall'], 0, 0, 75, 75, i * 80, j * 80, 100, 100)\n    //     }\n    // }\n    ctx.drawImage(images['background'], 0, 0, 800, 800, 0, 0, 1000, 1000)\n\n    // drawGrid(ctx)\n}\n\nconst draw = (e) => {\n    // 所有cell都由它来画\n    // 逻辑：如果存在dynamic，就画根据dynamic的配置画；如果不存在，就画img\n    // log(e)\n    const {x, y, alive, staticConf, dynamic} = e\n    const {width, height, name} = staticConf\n    if (!_.isUndefined(dynamic)) {\n        // log(`在(${x}, ${y})处画动图`)\n        const {name, width, height, index} = dynamic\n        if (alive) {\n            const xOffset = (CELL_SIZE - width) / 2\n            const yOffset = (CELL_SIZE - height) / 2\n            gameCtx.drawImage(images[name], index * width, 0, width, height, x + xOffset, y + yOffset, width, height)\n        }\n    } else {\n        if (alive) {\n            const xOffset = (CELL_SIZE - width) / 2\n            const yOffset = (CELL_SIZE - height) / 2\n            // log(`(${x / 80}, ${y / 80})`, name)\n            gameCtx.drawImage(images[name], x + xOffset, y + yOffset)\n        }\n    }\n    // log(mousePosition)\n    drawText(gameCtx, arroundArray.length, mousePosition[0], mousePosition[1])\n    // drawText(gameCtx, 1, 2, 2)\n    // drawText(gameCtx, '4', 1, 2)\n    // drawText(gameCtx, '5', 1, 3)\n    // drawText(gameCtx, '6', 1, 4)\n\n}\n\n\nconst update = (e) => {\n    // 所有的更新都靠update函数\n    // 如果在around数组里，则修改状态\n    const {dynamic} = e\n    if (_.findIndex(arroundArray, (o) => {\n        return o.id === e.id && o.x === e.x && o.y === e.y\n    }) === -1) {\n        if (dynamic) {\n            log('不在其中, 且有dynamic')\n            delete e.dynamic\n        }\n    }\n    for (let i = 0; i < arroundArray.length; i++) {\n        const a = arroundArray[i]\n        if (!_.isUndefined(a.dynamic)) {\n            // 其中的元素如果没有变亮就让它变亮\n        } else {\n            getHighlightAnimation(a)\n        }\n    }\n\n    if (!_.isUndefined(dynamic) && e.alive) {\n        // 有dynamic，就更新它！\n        // log(`在(${x}, ${y})处画动图`)\n\n        dynamic.index += 1\n        if (dynamic.name === 'dynamic_bubble' && dynamic.index >= dynamic.count) {\n            // 消除\n            e.alive = false\n            log('消除:', e)\n        }\n        dynamic.index %= dynamic.count\n    }\n}\n\nconst getHighlightAnimation = (e) => {\n    // 传入一个对象，修改它的配置\n    // let e = gameMap[i][j]\n    const {x, y, name} = e\n\n    // 获取高亮的动画配置，修改\n    const config = highlight_config['highlight_' + name]\n    e.dynamic = config\n}\n\nconst setBubble = (e) => {\n    const config = dynamic_config['dynamic_bubble']\n    e.dynamic = config\n}\n\nconst listenDrop = () => {\n    // 要不断监测。。是否需要下落\n    for (let k = 0; k < 10; k++) {\n        // 找到一列中 为空的坐标\n        // 一旦遇到了1个空的，那么上面的都要动\n        let tag = false\n        let step = 0\n        for (let l = 9; l >= 0; l--) {\n            if (gameMap[l][k].alive === false) {\n                step += 1\n                tag = true\n            }\n            if (tag && gameMap[l][k].alive) {\n                const start = gameMap[l][k]\n                const end = gameMap[l + step][k]\n\n                const startPos = [l, k]\n                const endPos = [l + step, k]\n                // 需要传入： 到终点之后，把gameMap修改掉\n                // 也就是把gameMap的end位置 修改成 start\n                drop(k, start, end.y, startPos, endPos)\n            }\n        }\n    }\n}\n\nconst renderSquare = (ctx) => {\n    // drop(2, gameMap[0][1], gameMap[1][1].y, [0, 1], [1, 1])\n\n    // getHighlightAnimation(gameMap[1][2])\n    // getHighlightAnimation(2, 2)\n\n    // setBubble(gameMap[1][2])\n\n    setInterval(() => {\n        clearSquare(ctx)\n        // 也就是update每个cell的配置具体画，还是靠调用draw\n        // TODO: 之后也要拆出来单独做\n        for (let x = 0; x < height; x += 1) {\n            for (let y = 0; y < width; y += 1) {\n                const e = gameMap[x][y]\n                // log('e:', e)\n                update(e)\n            }\n        }\n\n        // const e = gameMap[0][0]\n        // draw(e)\n\n        for (let x = 0; x < height; x += 1) {\n            for (let y = 0; y < width; y += 1) {\n                const e = gameMap[x][y]\n                // 仅仅只做画的操作，给什么画什么\n                // 其他更新操作 全部交给updat来做\n                log('eee',e)\n                draw(e)\n            }\n        }\n        listenDrop()\n        // log(gameMap[9])\n    }, 200)\n}\n\nconst drop = (tag, start, endY, startPos, endPos) => {\n    // log('下落:', start, endY, endY / CELL_SIZE, start.x / CELL_SIZE, start.y / CELL_SIZE)\n    setTimeout(() => {\n        if (start.y + 9 > endY) {\n            // 修复超出的部分\n            start.y = endY\n            // log('start:', start, endY)\n            // 相当于，杀掉了原来元素。。而不是新的元素\n            // 那么在下落的时候，应该是拷贝新的元素，而不是旧的\n            // 旧的元素应该杀掉\n\n            // 换位置，那原来位置的值，没有抹除掉。。\n            // 相当于，start只有y变化了，其他数据没有变，地图上的值也没变\n            const i = endPos[0]\n            const j = endPos[1]\n            gameMap[i][j] = _.cloneDeep(start)\n\n            // log(startPos, i, j)\n            gameMap[startPos[0]][startPos[1]].alive = false\n            // log(gameMap[9])\n            return;\n        }\n        start.y += 10\n        drop(tag, start, endY, startPos, endPos)\n\n    }, 1000 / 60)\n}\n\nconst getPos = (x, y) => {\n    // 根据坐标 算网格坐标\n    return [Math.ceil(x / CELL_SIZE), Math.ceil(y / CELL_SIZE)]\n}\n\nconst removeAround = (ctx, i, j, type) => {\n    if (type === MOUSE_TYPE.LEFT_CLICK && arroundArray.length > 1) {\n        // 点击修改状态，爆炸\n        // getBubble(gameMap[i][j])\n        log('现在点亮的:', arroundArray)\n        // 遍历它们，变成bubble\n        for (let i = 0; i < arroundArray.length; i++) {\n            const a = arroundArray[i]\n            setBubble(a)\n        }\n    }\n}\n\nconst handleDoubleClick = (event) => {\n    const type = event.button\n    const [y, x] = getPos(event.offsetX, event.offsetY)\n    log('双击', x - 1, y - 1)\n    mousePosition = [-1, -1]\n    removeAround(gameCtx, x - 1, y - 1, type)\n}\n\nconst highlightAround = (i, j) => {\n    const currentE = gameMap[i][j]\n    // log('当前点击:', currentE)\n    statusMap[i][j] = 1\n    arroundArray.push(currentE)\n    log('arroundArray', arroundArray)\n\n    const direction = [[-1, 0], [1, 0], [0, 1], [0, -1]]\n    direction.forEach(d => {\n        const newX = i + d[0]\n        const newY = j + d[1]\n        if (newX >= 0 && newY >= 0 && newX < width && newY < height) {\n            const newE = gameMap[newX][newY]\n            const status = statusMap[newX][newY]\n            // log('status:', status)\n            // around可以抽出来一个函数来处理，传进去cb\n            // 新坐标与当前坐标是同一类型，代表需要点亮.且必须是没有访问过的\n            if (newE.name === currentE.name && status === 0) {\n                // log('newE/currentE:', newE, currentE, newX, newY)\n                statusMap[newX][newY] = 1\n                highlightAround(newX, newY)\n            }\n        }\n    })\n}\n\nconst handleSingleClick = (event) => {\n    const [y, x] = getPos(event.offsetX, event.offsetY)\n    const i = x - 1\n    const j = y - 1\n    mousePosition[0] = i\n    mousePosition[1] = j\n    log('单击:', mousePosition)\n\n    if (arrayEquals(mousePosition, beforeMousePosition)) {\n        // 鼠标坐标没变过，则不用更新\n        log('鼠标未变')\n    } else {\n        beforeMousePosition[0] = i\n        beforeMousePosition[1] = j\n        // 清空一次数组\n        arroundArray = []\n        highlightAround(i, j)\n        statusMap = getEmptySquare(width, height)\n    }\n}\n\nconst bindEventDelegate = function (canvas) {\n    // canvas.addEventListener('mousedown', (event) => {\n    //     startX = event.offsetX\n    //     startY = event.offsetY\n    //     log(startX, startY)\n    // })\n\n    // canvas.addEventListener('mouseup', (event) => {\n    //     endX = event.offsetX\n    //     endY = event.offsetY\n    //     log(endX, endY)\n    // })\n    canvas.addEventListener('mousedown', handleSingleClick)\n    canvas.addEventListener('dblclick', handleDoubleClick)\n}\n\nconst initGlobalData = () => {\n    gameOver = false\n    firstClick = true\n    statusMap = [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n    ]\n}\n\n// 先秋裤全局\n// 画布也先做全局的\nvar gameCanvas = e('#id-game-canvas');\nvar gameCtx = gameCanvas.getContext('2d');\n\n// const images_config = {\n//     // 图片名对应路径\n//     bird: './static/bird.png',\n//     brown: './static/brown.png',\n//     fox: './static/fox.png',\n//     frog: './static/frog.png',\n//     hippo: './static/hippo.png',\n//     owl: './static/owl.png',\n// }\n\nconst height = 10\nconst width = 10\n\n// 存图片资源, 图片资源全放里面\nvar images = {}\n\n\n// var square = []\nvar gameMap = []\nvar statusMap = []\n\nvar beforeMousePosition = [-1, -1]\nvar mousePosition = [-1, -1]\nvar arroundArray = []\n\nconst _start = () => {\n    // gameMap[5][0].alive = false\n    // // let o = []\n    //\n    // for (let k = 0; k < 10; k++) {\n    //     // 找到一列中 为空的坐标\n    //     // 一旦遇到了1个空的，那么上面的都要动\n    //     let tag = false\n    //     let step = 0\n    //     for (let l = 9; l >= 0; l--) {\n    //         // log(l, k)\n    //         if (gameMap[l][k].alive === false) {\n    //             step += 1\n    //             tag = true\n    //         }\n    //         if (tag && gameMap[l][k].alive) {\n    //             // o.push([l, k])\n    //             const start = gameMap[l][k]\n    //             const end = gameMap[l + step][k]\n    //\n    //             const startPos = [l, k]\n    //             const endPos = [l + step, k]\n    //\n    //             log(startPos, endPos)\n    //             // // 需要传入： 到终点之后，把gameMap修改掉\n    //             // // 也就是把gameMap的end位置 修改成 start\n    //             drop(k, start, end.y, startPos, endPos)\n    //         }\n    //     }\n    // }\n\n    // log('需要下落的', o)\n    renderSquare(gameCtx)\n    bindEventDelegate(gameCanvas)\n}\n\nconst getSquare = () => {\n    return [\n        [5, 1, 5, 3, 2, 1, 4, 5, 2, 5],\n        [2, 2, 2, 4, 3, 2, 4, 5, 4, 2],\n        [3, 4, 2, 2, 1, 1, 1, 5, 4, 2],\n        [3, 3, 4, 4, 4, 2, 2, 2, 1, 5],\n        [2, 2, 5, 1, 2, 1, 2, 5, 1, 5],\n        [1, 1, 1, 4, 2, 3, 3, 4, 5, 1],\n        [2, 3, 2, 4, 3, 1, 5, 3, 3, 1],\n        [2, 2, 5, 1, 1, 1, 3, 3, 3, 5],\n        [1, 2, 4, 2, 3, 4, 1, 1, 1, 1],\n        [4, 5, 1, 1, 1, 5, 4, 1, 3, 1]]\n}\n\n// 获取静态图片\nconst getStaticElement = (square, i, j) => {\n    // 画出来的坐标 要和原数组一致。。。\n    const name = IMG_MAPPER[square[i][j]]\n    const e = {\n        id: square[i][j],\n        name: name,\n        x: j * CELL_SIZE,\n        y: i * CELL_SIZE,\n        alive: true,\n        staticConf: _.cloneDeep(static_config[name]),\n    }\n    return e\n}\n\nconst genMap = (square) => {\n    let output = []\n    for (let x = 0; x < height; x++) {\n        let t = []\n        for (let y = 0; y < width; y++) {\n            const e = getStaticElement(square, x, y)\n            t.push(e)\n        }\n        output.push(t)\n    }\n    log('map', output)\n    return output\n}\n\nconst _init = () => {\n    const square = getSquare()\n    gameMap = genMap(square)\n    statusMap = getEmptySquare(width, height)\n\n    _start()\n}\n\nconst loadAssets = (config, container) => {\n    // load resume files\n    let names = Object.keys(config)\n    let count = 0\n    for (let i = 0; i < names.length; i++) {\n        let name = names[i]\n        let path = config[name].path\n        let img = new Image()\n        img.src = path\n        // img加载完成后执行\n        img.onload = function () {\n            container[name] = img\n            count += 1\n            if (count == names.length) {\n                // 开始运行逻辑代码\n                // _start()\n                _init()\n            }\n        }\n    }\n}\n\nconst run = () => {\n    // 加载资源\n    const assets = {\n        ...static_config,\n        ...highlight_config,\n        ...dynamic_config,\n    }\n    loadAssets(assets, images)\n}\n\nconst _main = () => {\n    run()\n}\n\n_main()\n"]}