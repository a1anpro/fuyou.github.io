{"version":3,"sources":["popstar/animation.js"],"names":["testCanvas","e","testCtx","getContext","animationCanvas","TEST_IMG_MAPPER","1","2","3","4","5","6","test_images_config","bird","path","width","height","count","index","drawCell","ctx","img","i","j","drawRow","line","cell","strokeStyle","lineNum","length","moveTo","lineTo","closePath","stroke","beginPath","size","drawGrid","drawVerticalLine","drawHorizontalLine","clearCanvas","canvas","clearRect","clearAll","animationCtx","cellHeight","drawCarousel","row","config","log","name","test_images","drawImage","strokeRect","timeJob","testGameMap","drawAnimation","x","y","_drawAnimation","alive","xOffset","frog","hippo","setInterval","fox","brown","_draw","_render","globalTimeJob","square","output","t","r","_","cloneDeep","push","testGenMap","_init","names","Object","Image","src","onload","_loop","_main"],"mappings":"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","file":"../../popstar/animation.js","sourcesContent":["var testCanvas = e('#id-test-canvas');\nvar testCtx = testCanvas.getContext('2d');\n\nvar animationCanvas = e('#id-animation-canvas');\nvar animationCtx = animationCanvas.getContext('2d');\n\nconst TEST_IMG_MAPPER = {\n    1: 'bird',\n    2: 'brown',\n    3: 'fox',\n    4: 'frog',\n    5: 'hippo',\n    6: 'owl',\n}\n\nvar test_images = {}\n\nlet test_images_config = {\n    // 图片名对应路径\n    bird: {\n        name: 'bird',\n        path: './resume/animation/test/bird.png',\n        width: 66,\n        height: 65,\n        count: 10,\n        // 当前访问的第几张\n        index: 0,\n    },\n    brown: {\n        name: 'brown',\n        path: './resume/animation/test/brown.png',\n        width: 70,\n        height: 65,\n        count: 10,\n        index: 0,\n    },\n    fox: {\n        name: 'fox',\n        path: './resume/animation/test/fox.png',\n        width: 68,\n        height: 63,\n        count: 7,\n        index: 0,\n    },\n    frog: {\n        name: 'frog',\n        path: './resume/animation/test/frog.png',\n        width: 70,\n        height: 65,\n        count: 9,\n        index: 0,\n    },\n    hippo: {\n        name: 'hippo',\n        path: './resume/animation/test/hippo.png',\n        width: 64,\n        height: 65,\n        count: 8,\n        index: 0,\n    },\n    owl: {\n        name: 'owl',\n        path: './resume/animation/test/owl.png',\n        width: 70,\n        height: 65,\n        count: 3,\n        index: 0,\n    }\n}\n\n\nconst drawCell = (ctx, img, i, j) => {\n    ctx.drawImage(img, i * CELL_SIZE, j * CELL_SIZE)\n}\n\nconst drawRow = (ctx, img, line) => {\n    for (let i = 1; i <= 9; i += 1) {\n        drawCell(ctx, cell, i, line)\n    }\n}\n\nconst drawSquare = (ctx) => {\n    // draw 之前需要先清除原来的\n    for (let i = 1; i <= 9; i += 1) {\n        drawRow(ctx, cell, i)\n    }\n}\n\nconst drawVerticalLine = (ctx, lineNum, length) => {\n    const size = 70\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"black\"\n    for (let j = 0; j <= lineNum; j++) {\n        ctx.moveTo(size * j, 0);\n        ctx.lineTo(size * j, length);\n    }\n    ctx.closePath();\n    ctx.stroke();\n}\n\nconst drawHorizontalLine = (ctx, lineNum, length) => {\n    const size = 70\n    ctx.beginPath();\n    ctx.strokeStyle = \"black\"\n    for (let j = 0; j <= lineNum; j++) {\n        ctx.moveTo(0, j * size);\n        ctx.lineTo(length, j * size);\n    }\n    ctx.closePath();\n    ctx.stroke();\n}\n\nconst drawGrid = (ctx) => {\n    drawVerticalLine(ctx, 10, 280)\n    drawHorizontalLine(ctx, 4, 700)\n}\n\nconst clearCanvas = (ctx, canvas) => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n}\n\nconst clearAll = () => {\n    // clear\n    clearCanvas(animationCtx, animationCanvas)\n    clearCanvas(testCtx, testCanvas)\n\n    // 网格是打在动画上，不是原型图上\n    drawGrid(animationCtx)\n}\n\nconst cellHeight = 65\nconst drawCarousel = (row, config) => {\n    log('here')\n    // 在row行，画轮播图\n    var {name, width, height, count, index} = config\n    config.index += 1\n    config.index %= count\n\n    // 画轮播图，是固定的\n    testCtx.drawImage(test_images[name], 0, 65 * (row - 1))\n\n    // 画当前帧的网格\n    testCtx.strokeStyle = \"red\"\n    testCtx.strokeRect(index * width, 65 * (row - 1), width, height)\n\n    // 画当前帧 —> 组成的动画\n    // animationCtx.drawImage(test_images[name], index * width, 0, width, height, (row - 1) * 70, 0, width, height)\n}\n\nconst timeJob = (e) => {\n    // 遍历所有config，动起来\n    const { config } = e\n    var { name, width, height, count, index } = config\n    config.index += 1\n    config.index %= count\n}\n\nconst globalTimeJob = () => {\n    // 在代码里的表现就是 遍历地图\n    // const keys = Object.keys(test_images_config)\n    // for (let i = 0; i < keys.length; i += 1) {\n    //     timeJob(test_images_config[keys[i]])\n    // }\n    // 获取地图里的每个config\n\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 10; j++) {\n            const config = testGameMap[i][j]\n            timeJob(config)\n        }\n    }\n}\n\nconst drawAnimation = (config, x, y) => {\n    var {name, width, height, count, index} = config\n    // (sx, sy) 是原图里的坐标\n    // (dx, dy) 是要放位置的坐标\n    // TODO: 需要加居中\n    // 一个网格是 70 * 70的，要居中，就需要根据width和height算出偏移\n    const xOffset = (70 - width) / 2\n    const yOffset = (70 - height) / 2\n    animationCtx.drawImage(test_images[name], index * width, 0, width, height, (x - 1) * 70 + xOffset, (y - 1) * 70 + yOffset, width, height)\n}\n\nconst _drawAnimation = (e) => {\n    var { x, y, alive, config } = e\n    const { name, width, height, count, index } = config\n\n    // (sx, sy) 是原图里的坐标\n    // (dx, dy) 是要放位置的坐标\n    // TODO: 需要加居中\n    // 一个网格是 70 * 70的，要居中，就需要根据width和height算出偏移\n    const xOffset = (70 - width) / 2\n    const yOffset = (70 - height) / 2\n    animationCtx.drawImage(test_images[name], index * width, 0, width, height, (y - 1) * 70 + xOffset, (x - 1) * 70 + yOffset, width, height)\n}\n\nconst _start = () => {\n    // 这是静态的config，之后的每个config都要从地图里取\n    const brown = test_images_config['brown']\n    const fox = test_images_config['fox']\n    const bird = test_images_config['bird']\n    const frog = test_images_config['frog']\n    const hippo = test_images_config['hippo']\n\n\n    setInterval(() => {\n        clearAll()\n\n        // globalTimeJob()\n\n        // drawAnimation(fox)\n        // 轮播\n        drawCarousel(1, fox)\n        // 定时脚本\n        // timeJob(fox)\n        drawAnimation(fox, 1, 1)\n\n        // drawCarousel(2, brown)\n        // timeJob(brown)\n        drawAnimation(brown, 2, 2)\n\n        // drawCarousel(3, bird)\n        // timeJob(bird)\n        drawAnimation(bird, 3, 3)\n\n        // drawCarousel(4, frog)\n        // timeJob(frog)\n        drawAnimation(frog, 4, 4)\n\n        // drawCarousel(5, hippo)\n        // timeJob(hippo)\n        drawAnimation(hippo, 3, 4)\n\n    }, 200)\n\n    // window.addEventListener('keydown', (event) => {\n    //\n    // })\n}\n\nconst _draw = () => {\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 10; j++) {\n            const e = testGameMap[i][j]\n            _drawAnimation(e)\n        }\n    }\n}\n\nconst _render = () => {\n    setInterval(() => {\n        // 清除地图\n        clearAll()\n        // 设置定时脚本, 更新每个config的配置\n        globalTimeJob()\n        _draw()\n    }, 200)\n}\n\nvar square = [\n    [5, 1, 5, 3, 2, 1, 4, 5, 2, 5],\n    [2, 1, 2, 4, 3, 2, 4, 1, 4, 2],\n    [3, 4, 1, 2, 1, 1, 1, 1, 4, 1],\n    [3, 3, 4, 4, 4, 2, 2, 1, 2, 5],\n]\n\nconst testGenMap = () => {\n    let output = []\n    for (let i = 0; i < 4; i++) {\n        let t = []\n        for (let j = 0; j < 10; j++) {\n            // 取随机数\n            const r = square[i][j]\n            const name = TEST_IMG_MAPPER[r]\n            const config = test_images_config[name]\n            // 要用拷贝\n            const e = {\n                x: i,\n                y: j,\n                alive: true,\n                config: _.cloneDeep(config),\n            }\n            t.push(e)\n        }\n        output.push(t)\n    }\n    return output\n}\n\nvar testGameMap = testGenMap()\nlog('gameMap:', testGameMap)\n\nconst _init = () => {\n    let names = Object.keys(test_images_config)\n    let count = 0\n    for (let i = 0; i < names.length; i++) {\n        let name = names[i]\n        let path = test_images_config[name].path\n        let img = new Image()\n        img.src = path\n        img.onload = function () {\n            test_images[name] = img\n            count += 1\n            if (count == names.length) {\n                // 开始运行逻辑代码\n                // _start()\n                _render()\n            }\n        }\n    }\n}\n\nconst _main = () => {\n    _init()\n}\n\n_main()\n"]}