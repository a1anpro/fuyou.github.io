{"version":3,"sources":["mineSweeper/sklz.js"],"names":["es","selector","document","querySelectorAll","e","querySelector","log","console","bind","SHOW_MAP","NUMBER","CELL","BLACK_BOOM","RED_BOOM","EMPTY","FLAG","QUESTION","genMap","direction","i","j","len","forEach","d","newX","newY","square","_loop2","_loop","drawCell","ctx","img","x","y","cellSize","drawRow","line","cell","drawSquare","drawText","text","font","fillStyle","1","2","3","4","5","6","7","fillText","Math","ceil","renderSquare","status","statusMap","gameCtx","gameMap","toString","blackBoom","redBoom","empty","flagImg","questionImg","getPos","vjklAll","vjklSelf","s","flag","vjklAround","handleClick","type","firstClick","m","bindEventDelegate","canvas","addEventListener","event","button","_getPos2","_slicedToArray","offsetX","offsetY","gameStart","initMap","testCtx","run","gameCanvas","random","floor","genTestData","cnt","data","genRandom","getContext","testCanvas","Image","src","onload","_main"],"mappings":"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","file":"../../mineSweeper/sklz.js","sourcesContent":["const es = selector => document.querySelectorAll(selector)\nconst e = selector => document.querySelector(selector)\nconst log = console.log.bind(console)\n\n\nconst SHOW_MAP = {\n    NUMBER: 1,\n    CELL: 0,\n    BLACK_BOOM: -1,\n    RED_BOOM: -2 ,\n    EMPTY: -3,\n    FLAG: -4,\n    QUESTION: -5,\n}\n\nconst genMap = (square) => {\n    // 遍历square所有元素，如果是地雷，则加周围的数字\n    const direction = [[-1, 0], [-1, -1], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]]\n\n    const len = square.length\n    for (let i = 0; i < len; i += 1) {\n        for (let j = 0; j < len; j += 1) {\n            const e = square[i][j]\n            if (e === 9) {\n                direction.forEach(d => {\n                    const newX = i + d[0]\n                    const newY = j + d[1]\n\n                    if (newX >= 0 && newY >= 0 && newX < 9 && newY < 9\n                    ) {\n                        if (square[newX][newY] !== 9) {\n                            // 有雷就不加了\n                            square[newX][newY] += 1\n                        }\n                    }\n                })\n            }\n        }\n    }\n    return square\n}\n\nconst drawCell = (ctx, img, x, y) => {\n    ctx.drawImage(img, (x - 1) * cellSize, (y - 1) * cellSize)\n}\n\nconst drawRow = (ctx, img, line) => {\n    for (let i = 1; i <= 9; i += 1) {\n        drawCell(ctx, cell, i, line)\n    }\n}\n\nconst drawSquare = (ctx) => {\n    for (let i = 1; i <= 9; i += 1) {\n        drawRow(ctx, cell, i)\n    }\n}\n\nconst drawText = (ctx, text, x, y) => {\n    ctx.font = \"bold 20px Arial\"\n    // log('text:', text, typeof text)\n    const color = {\n        '1': 'blue',\n        '2': 'green',\n        '3': 'red',\n        '4': '#04207f',\n        '5': '#800f00',\n        '6': '#067f7f',\n        '7': 'black',\n        '8': '#808080',\n    }\n    ctx.fillStyle = color[text]\n    ctx.fillText(text, 8 + 25 * (x - 1), 25 * (y - 1) + 20)\n}\n\nconst getPos = (x, y) => {\n    // 根据坐标 算网格坐标\n    return [Math.ceil(x / 25), Math.ceil(y / 25)]\n}\n\nconst renderSquare = (ctx) => {\n    // 根据statusMap来render整个地图\n    for (let i = 0; i < 9; i += 1) {\n        for (let j = 0; j < 9; j += 1) {\n            const status = statusMap[i][j]\n            // NUMBER = 1\n            if (status === SHOW_MAP.NUMBER) {\n                // 根据gameMap显示数字\n                drawText(gameCtx, gameMap[i][j].toString(), i + 1, j + 1)\n            } else if (status === SHOW_MAP.BLACK_BOOM) {\n                // 显示地雷\n                // BOOM\n                drawCell(gameCtx, blackBoom, i + 1, j + 1)\n            } else if (status === SHOW_MAP.RED_BOOM) {\n                drawCell(gameCtx, redBoom, i + 1, j + 1)\n            } else if (status === SHOW_MAP.EMPTY) {\n                // 展开的空白\n                drawCell(gameCtx, empty, i + 1, j + 1)\n            } else if (status === SHOW_MAP.FLAG) {\n                drawCell(gameCtx, flagImg, i + 1, j + 1)\n            } else if (status === SHOW_MAP.QUESTION) {\n                drawCell(gameCtx, questionImg, i + 1, j + 1)\n            } else if (status === SHOW_MAP.CELL) {\n                drawCell(gameCtx, cell, i + 1, j + 1)\n            }\n        }\n    }\n}\n\nconst vjklAll = () => {\n    for (let i = 0; i < 9; i += 1) {\n        for (let j = 0; j < 9; j += 1) {\n            // 只展开炸弹\n            const status = gameMap[i][j]\n            if (status === 9) {\n                statusMap[i][j] = -1\n            }\n            // else if (status === 0) {\n            //     statusMap[i][j] = -3\n            // } else {\n            //     statusMap[i][j] = 1\n            // }\n        }\n    }\n}\n\nconst vjklAround = (i, j, flag) => {\n    vjklSelf(i, j, flag)\n    const direction = [[-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0]]\n    direction.forEach(d => {\n        const newX = i + d[0]\n        const newY = j + d[1]\n        // 打开周围的8个坐标，这8个自己再去递归, 至于递归到哪里 不管\n        if (newX >= 0 && newY >= 0 && newX < 9 && newY < 9) {\n            // log(i, j, newX, newY, `(${gameMap[newX][newY]})`)\n            // 1- 满足坐标边界条件\n            // 2- 判断周围坐标是否符合打开条件，也就是地图为非9的\n            const s = gameMap[newX][newY]\n            if (s === 0) {\n                // 需要连锁反应\n                vjklSelf(newX, newY, -3)\n            } else if (s !== 9) {\n                // 不需要连锁反应\n                vjklSelf(newX, newY, 1)\n            }\n        }\n    })\n}\n\nconst vjklSelf = (i, j, flag) => {\n    // 因为空白和数字状态不同\n    if (i >= 0 && j >= 0 && i < 9 && j < 9) {\n        // 1- 符合坐标，且没打开，则打开\n        // 2- 再看打开的周围\n        if (statusMap[i][j] === 0 && gameMap[i][j] === 0) {\n            statusMap[i][j] = flag\n            vjklAround(i, j, flag)\n        } else {\n            statusMap[i][j] = flag\n        }\n    }\n}\n\n\nconst handleClick = (ctx, x, y, type) => {\n    // 核心函数，点击后的操作！\n    // 根据statusMap来画图\n    // 根据gameMap来影响statusMap\n    // 如果gameMap是9，则展开所有的数据\n    const i = x - 1\n    const j = y - 1\n    if (firstClick) {\n        firstClick = false\n        gameMap[i][j] = 0\n    }\n\n    if (type === 0) {\n        const m = gameMap[i][j]\n        if (m === 9) {\n            // -2表示红色雷\n            vjklAll()\n            statusMap[i][j] = -2\n        } else if (m === 0) {\n            vjklAround(i, j, -3)\n        } else {\n            vjklSelf(i, j, 1)\n        }\n    } else if (type === 2) {\n        // 渲染旗子, 点击不同的次数 切换不同的状态\n        const status = statusMap[i][j]\n        log('status:', status)\n        if (status === 0) {\n            statusMap[i][j] = -4\n        } else if (status === -4) {\n            statusMap[i][j] = -5\n        } else if (status === -5) {\n            statusMap[i][j] = 0\n        }\n    }\n\n    renderSquare(ctx)\n}\n\n\nconst bindEventDelegate = function (canvas, ctx) {\n    canvas.addEventListener('mousedown', (event) => {\n        const type = event.button\n        const [x, y] = getPos(event.offsetX, event.offsetY)\n        handleClick(ctx, x, y, type)\n    })\n}\n\nconst gameStart = () => {\n    // init\n    firstClick = true\n\n    initMap()\n    // game canvas\n    drawSquare(gameCtx)\n    // 画测试数据地图\n    drawSquare(testCtx)\n    for (let i = 0; i < 9; i += 1) {\n        for (let j = 0; j < 9; j += 1) {\n            drawText(testCtx, gameMap[i][j], i + 1, j + 1)\n        }\n    }\n}\n\nconst run = () => {\n    gameStart()\n    // 给canvas绑定点击事件，在gamectx上画图\n    bindEventDelegate(gameCanvas, gameCtx)\n}\n\nconst genRandom = () => {\n    return Math.floor(Math.random() * Math.floor(9))\n}\n\nconst genTestData = () => {\n    let cnt = 12\n    let data = [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n    ]\n\n    while (cnt) {\n        data[genRandom()][genRandom()] = 9\n        cnt -= 1\n    }\n    return data\n}\n\nconst initMap = () => {\n    data = genTestData()\n    gameMap = genMap(data)\n    statusMap = [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0,],\n    ]\n}\n\n\n// 先秋裤全局\n// 画布也先做全局的\nvar gameCanvas = e('#id-game-canvas');\nvar gameCtx = gameCanvas.getContext('2d');\n\nvar testCanvas = e('#id-test-canvas');\nvar testCtx = testCanvas.getContext('2d');\n\n// 先用全局变量来管理资源\nvar cell = new Image()\nvar redBoom = new Image()\nvar blackBoom = new Image()\nvar empty = new Image()\nvar flagImg = new Image()\nvar questionImg = new Image()\n\ncell.src = './static/cell.png'\nredBoom.src = './static/red_boom.png'\nblackBoom.src = './static/black_boom.png'\nempty.src = './static/empty.png'\nflagImg.src = './static/flag.png'\nquestionImg.src = './static/question.png'\nconst cellSize = 25\n\nlet data = null\nlet gameMap = null\nlet statusMap = null\n\nlet firstClick = true\n\nconst _main = () => {\n    redBoom.onload = function () {\n        run()\n    }\n}\n\n_main()"]}