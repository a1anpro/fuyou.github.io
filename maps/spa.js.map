{"version":3,"sources":["spa.js"],"names":["log","console","bind","renderHtml","path","element","document","querySelector","src","responseForPath","mapper","/home","/game","/popstar","/asm","/resume","/mineSweeper","argsFromQuery","query","split","forEach","e","_e$split2","_slicedToArray","k","v","o","index","url","indexOf","slice","q","render","location","hash","_parsedUrl","parsedUrl","childrens","$","children","h","i","length","includes","child","addClass","hasClass","removeClass","window","addEventListener","event","bindEventLink","_step","_iterator","_createForOfIteratorHelper","querySelectorAll","s","n","done","value","err","f","bindEvents","bindEventHashChange","__main","setup","links"],"mappings":"81DAKA,IAAMA,IAAMC,QAAQD,IAAIE,KAAKD,SAEvBE,WAAa,SAACC,GAChB,IAAIC,EAAUC,SAASC,cAAc,UAErCP,IAAI,QAASI,GACbC,EAAQG,IAAMJ,GAGZK,gBAAkB,SAACL,GAdzB,IAAAM,EAAA,CACAC,QAAA,YACAC,QAAA,oBACAC,WAAA,uBACAC,OAAA,mBACSC,UAAWf,sBAiBZgB,eAAgB,2BAdpB,OAAIX,KAAUC,EAiBHI,EAAON,GAdlB,aAIAa,cAAA,SAAAC,GACA,IAAIR,EAAM,GAMN,OALSQ,EAAAC,MADA,KAETC,QAAS,SAAAC,GACT,IAAAC,EAAAC,eAAYF,EAAAF,MAAA,KAAZ,GAAAK,EAAAF,EAAA,GAAYG,EAAZH,EAAA,GACAI,EAAAF,GAAQC,IAERC,GAEAtB,UAAQM,SAAAA,GAAZ,IAAAN,EAEO,GACHc,EAAO,GACVS,EAAAC,EAAAC,QAAA,KAOG,OArBR,EAAAF,GAiCQvB,EAAOwB,EAAIE,MAAM,EAAGH,GAhBtBV,EAAAA,EAAgBa,MAAAH,EAAhBV,GACGC,EAALD,cAAAc,IAEGX,EAAQQ,EACP,CAAQH,KAAAA,EAqBRP,MAAAA,IAzBRc,OAAA,WAYIhC,IAAII,gBAAJ6B,SAAAC,MAEA,IAAAC,EAAwBC,UAAxBH,SAAAC,KAAAJ,MAAA,IAAIH,EAAJQ,EAAIR,KAAQC,EAAZO,EAAYP,MAsBZ5B,IAAI,iBAAkBI,EAAMc,GArBxBS,EAAKlB,gBAAOL,GACZA,WAAW0B,GAOf,IAqBA,IAAIO,EAAYC,EAAE,SAASC,WACvBC,EAAI,gBAtBDC,EAAA,EAAAA,EAAAJ,EAAAK,OAAAD,GAAA,EAAA,CACC,IAAJrC,EADGkC,EAAAD,EAAAI,IAEHvB,EAAAA,KAAAA,QAFJyB,SAAAvC,GA4BQwC,EAAMC,SAASL,GArBvBI,EAAAE,SAAAN,IACAI,EAAAG,YAAAP,KAIYtB,oBAAAA,WA0BZ8B,OAAOC,iBAAiB,aAAc,SAACC,GAvBvC/C,YA8BEgD,cAAgB,WAxBlB,IAwBwBC,EAAAC,EAAAC,2BAxBXhD,SAAKiD,iBAAlB,MAwBwB,IAvBxB,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAAAN,EAAAO,MA0BMV,iBAAiB,QAAS,SAACC,GAzBvBlB,WAsBc,MAAA4B,GAAAP,EAAAhC,EAAAuC,GAAA,QAAAP,EAAAQ,MAlBhBC,WAAA,WAMHC,uBAIHA,MAAAA,aACFC,OAAA,WADJF,aAkCIG,SA1BwB3D,SAAA2C,iBAAA,mBAEViB,WAFUF","file":"../spa.js","sourcesContent":["// SPA(Single Page Application) 说的是当页面的内容变化的时候, 还处于当前页面\n// 这样的话加载内容更少, 速度更快, 体验更好\n// 如果直接采用 ajax 刷新的话, 其实也可以实现功能, 但是并没有记住页面状态的能力, 因为 URL 没有变化\n// 而路由可以用来记住相应的状态\n// 在 HTML5 之前, 一般会采用 hash 来实现路由, hash 发生变化的时候页面并不会刷新\nconst log = console.log.bind(console)\n\nconst renderHtml = (path) => {\n    let element = document.querySelector('.route')\n    // element.innerHTML = text\n    log('path:', path)\n    element.src = path\n}\n\nconst responseForPath = (path) => {\n    // 需要配成配置，读配置生成目录和 nav 标签\n    let mapper = {\n        '/home': 'home.html',\n        '/game': './game/index.html',\n        '/popstar': './popstar/index.html',\n        '/asm': './cpu/index.html',\n        '/resume': './resume/index.html',\n        '/mineSweeper': './mineSweeper/sklz.html',\n    }\n    if (path in mapper) {\n        return mapper[path]\n    } else {\n        return 'not found'\n    }\n}\n\nconst argsFromQuery = (query) => {\n    let o = {}\n    let qs = query.split('&')\n    qs.forEach(e => {\n        let [k, v] = e.split('=')\n        o[k] = v\n    })\n    return o\n}\n\nconst parsedUrl = (url) => {\n    // 这个时候 url 的格式是 /about?name=gua, 因为 # 已经通过 slice 去掉了\n    let path = ''\n    let query = {}\n    let index = url.indexOf('?')\n    if (index > -1) {\n        path = url.slice(0, index)\n        let q = url.slice(index + 1)\n        query = argsFromQuery(q)\n    } else {\n        path = url\n    }\n    // 直接返回 object 的简写形式\n    return {\n        path,\n        query,\n    }\n}\n\nconst render = () => {\n    // 通过 location.hash 拿到当前 hash 值, 格式为 #/about?name=gua\n    // 注意, 这里用的是 #/about, 可能有人会使用 #about, 后者看似省了「/」 这个字符, 但其实更麻烦\n    // 因为采用 #/about 的话, # 后面是一个完整的 url, 完全复用以前处理 url 的函数\n    log('location.hash', location.hash)\n    // 再用 parsedUrl 解析这个地址, 得到 path 和 query\n    let { path, query } = parsedUrl(location.hash.slice(1))\n    log('path and query', path, query)\n    let r = responseForPath(path)\n    renderHtml(r)\n\n    // 修改导航栏的颜色，做高亮提示：\n    // 需求: 切换了 hash 就去点亮对应的 hash\n    // 1, 拿到 path, 遍历 list 拿到所有的 href, 看哪个 href 里有对应的值\n    // 2, 有值就 addClass 上去\n    var childrens = $('.list').children()\n    var h = 'nav-highlight'\n    for (var i = 0; i < childrens.length; i += 1) {\n        var child = $(childrens[i])\n        var href = child.attr('href')\n        if (href.includes(path)) {\n            // 设置颜色上去\n            child.addClass(h)\n        } else {\n            if (child.hasClass(h)) {\n                child.removeClass(h)\n            }\n        }\n    }\n}\n\nconst bindEventHashChange = () => {\n    window.addEventListener('hashchange', (event) => {\n        // event.oldURL 表示变化之前的 URL, event.newURL 表示变化之后（也就是现在）的 URL\n        // log('event url', event.oldURL, event.newURL)\n        render()\n    })\n}\n\nconst bindEventLink = () => {\n    let links = document.querySelectorAll('a')\n    for (let l of links) {\n        l.addEventListener('click', (event) => {\n            render()\n        })\n    }\n}\n\nconst bindEvents = () => {\n    // 监听路由的变化有两种思路\n    // 一个是使用 window 的 hashchange 事件完成\n    // 另一个是监听其他导致路由发生变化的操作, 比如点击 a 标签之后路由发生变化, 那么就监听 a 的 click 事件\n\n    // 下面两个方式请自己尝试\n    bindEventHashChange()\n    // bindEventLink()\n}\n\nconst setup = () => {\n    // 第一次进入页面的时候, 开始渲染内容\n    // render()\n}\n\nconst __main = () => {\n    bindEvents()\n    setup()\n}\n\n// DOMContentLoaded 事件表示 HTML 已经加载(渲染)到页面中, 这个时候操作 DOM 元素就没有问题\ndocument.addEventListener('DOMContentLoaded', () => {\n    __main()\n})\n"]}