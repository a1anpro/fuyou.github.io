"use strict";var test_set=function(){asm_code="\n        set a1 1\n        halt\n    ",memory=machine_code(asm_code);var e=new AxePu(memory);e.run(),a1=e.get_register("a1"),expect=[1],output=[a1],assert(isArrayEqual(expect,output),"[vm] test_set")},test_set2=function(){asm_code="\n        set2 a1 288\n        halt\n    ",memory=machine_code(asm_code);var e=new AxePu(memory);e.run(),a1=e.get_register("a1"),expect=[288],output=[a1],assert(isArrayEqual(expect,output),"[vm] test_set2")},test_save=function(){asm_code="\n        set a1 10\n        set a2 3\n        save a1 @100\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),data=memory[100],expect=[10],output=[data],assert(isArrayEqual(expect,output),"[vm] test_save")},test_save2=function(){asm_code="\n        set a1 10\n        set2 a2 3\n        save2 a2 @258\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),data=memory[258],expect=[3],output=[data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_save2")},test_load=function(){asm_code="\n        set a1 10\n        set a2 3\n        save a1 @100\n        load @100 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),data=memory[100],a2=e.get_register("a2"),expect=[10,10],output=[data,a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_load")},test_load2=function(){asm_code="\n        set2 a1 300\n        save2 a1 @260\n        load2 @260 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),mem_data1=memory[260],mem_data2=memory[261],a2=e.get_register("a2"),expect=[44,1,300],output=[mem_data1,mem_data2,a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_load2")},test_add2=function(){asm_code="\n        set2 a1 258\n        set a2 10\n        add2 a1 a2 a3\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),reg_data=e.get_register("a3"),expect=[268],output=[reg_data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_add2")},test_subtract2=function(){asm_code="\n        set2 a1 288\n        set a2 10\n        subtract2 a1 a2 a3\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),reg_data=e.get_register("a3"),expect=[278],output=[reg_data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_subtract2")},test_save_from_register=function(){asm_code="\n        set2 a1 288\n        set2 a2 100\n        save_from_register a1 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),mem_data=memory[100],expect=[32],output=[mem_data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_save_from_register")},test_save_from_register2=function(){asm_code="\n        set2 a1 2000\n        set2 a2 2\n        save_from_register2 a1 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),mem_data1=memory[2],mem_data2=memory[3],expect=[208,7],output=[mem_data1,mem_data2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_save_from_register2")},test_load_from_register=function(){asm_code="\n        set2 a1 288\n        set2 a2 258\n        save2 a2 @32\n        load_from_register a1 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),a2=e.get_register("a2"),expect=[2],output=[a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_load_from_register")},test_load_from_register2=function(){asm_code="\n        set2 a1 288\n        set2 a2 258\n        save2 a2 @288\n        load_from_register2 a1 a2\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),a2=e.get_register("a2"),expect=[258],output=[a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_load_from_register2")},test_jump_from_register=function(){asm_code="\n        set a1 9\n        jump_from_register a1\n        set a2 2\n        halt\n\n        set a2 10\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),a2=e.get_register("a2"),expect=[10],output=[a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump_from_register")},test_jump_from_register_2=function(){asm_code="\n        set2 a1 14\n        set2 a2 157\n        jump_from_register a1\n        set2 a1 123\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),a1=e.get_register("a1"),a2=e.get_register("a2"),pa=e.get_register("pa"),expect=[14,157,15],output=[a1,a2,pa],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump_from_register_2")},test_jump=function(){asm_code="\n        set a1 5\n        jump @label1\n\n        @label1\n        set a2 2\n        add a1 a2 a1\n        save a1 @100\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),mem_data=memory[100],expect=[7],output=[mem_data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump")},test_jump_if_less=function(){asm_code="\n        set a1 5\n        set a2 10\n        compare a1 a2\n        jump_if_less @label1\n\n        @label1\n        set a1 1\n        set a2 99\n        add a1 a2 a1\n        save a1 @100\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length),new AxePu(memory).run(),mem_data=memory[100],expect=[100],output=[mem_data],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump_if_less")},test_jump_if_less_2=function(){asm_code="\n        set2 a1 288\n        set2 a2 157\n        compare a1 a2\n        jump_if_less @label1\n        set2 a1 100\n        @label1\n\n        halt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,1024-memory.length);var e=new AxePu(memory);e.run(),a1=e.get_register("a1"),a2=e.get_register("a2"),expect=[100,157],output=[a1,a2],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump_if_less_2")},test_multiply=function(){asm_code="jump @1024\n.memory 1024\n\nset2 f1 3 ;一开始设置到栈顶\njump @function_end ;先去设置一下内存结构\n\n@function_multiply ;6\nset2 a3 2\nsave2 a1 @65534\n\n@while_start  ;15\ncompare a2 a3\njump_if_less @while_end\n\n; 用a2来给a3加1\nsave2 a2 @65532\nset2 a2 1\nadd2 a3 a2 a3\n\n; 把a1原来的值存起来在加\nload2 @65534 a2\nadd2 a1 a2 a1\n\nload2 @65532 a2\njump @while_start ;18\n@while_end ;47\n\nset2 a3 2\nsubtract2 f1 a3 f1\nload_from_register2 f1 a2\njump_from_register a2\n\n@function_end ;61\n\n;设置参数\nset2 a1 10\nset2 a2 3\n\nset2 a3 14 ;4字节,设置f1是调用函数之后返回的位置\nadd2 pa a3 a3 ;4字节\n\nsave_from_register2 a3 f1 ;3字节\nset2 a3 2 ;4字节\nadd2 f1 a3 f1 ;4字节\njump @function_multiply ;3字节,10\nhalt\n    ",memory=machine_code(asm_code),memory=fillZero(memory,Math.pow(2,16)-memory.length);var e=new AxePu(memory);e.run(),a1=e.get_register("a1"),output=[a1],expect=[990],log("output:",output),assert(isArrayEqual(expect,output),"[vm] test_jump_if_less_2")},test_vm=function(){test_multiply()};